// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageProtocol.proto

#ifndef PROTOBUF_MessageProtocol_2eproto__INCLUDED
#define PROTOBUF_MessageProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MessageProtocol_2eproto();
void protobuf_AssignDesc_MessageProtocol_2eproto();
void protobuf_ShutdownFile_MessageProtocol_2eproto();

class ContinueQuerySession;
class QueryRequest;
class QueryResponse;
class RemoteResults;
class SimpleResponse;
class StartQuerySession;

enum MsgType {
  START_QUERY_SESSION = 0,
  TERMINATE_QUERY_SESSION = 1,
  CONTINUE_QUERY_SESSION = 2,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = START_QUERY_SESSION;
const MsgType MsgType_MAX = CONTINUE_QUERY_SESSION;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class QueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  enum MsgCase {
    kStartQuerySession = 4,
    kContinueQuerySession = 6,
    MSG_NOT_SET = 0,
  };

  void Swap(QueryRequest* other);

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const { return New(NULL); }

  QueryRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 rqID = 1;
  void clear_rqid();
  static const int kRqIDFieldNumber = 1;
  ::google::protobuf::int64 rqid() const;
  void set_rqid(::google::protobuf::int64 value);

  // optional int64 querySessionID = 2;
  void clear_querysessionid();
  static const int kQuerySessionIDFieldNumber = 2;
  ::google::protobuf::int64 querysessionid() const;
  void set_querysessionid(::google::protobuf::int64 value);

  // optional .Protobuf.MsgType msgType = 3;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 3;
  ::Protobuf::MsgType msgtype() const;
  void set_msgtype(::Protobuf::MsgType value);

  // optional .Protobuf.StartQuerySession startQuerySession = 4;
  bool has_startquerysession() const;
  void clear_startquerysession();
  static const int kStartQuerySessionFieldNumber = 4;
  const ::Protobuf::StartQuerySession& startquerysession() const;
  ::Protobuf::StartQuerySession* mutable_startquerysession();
  ::Protobuf::StartQuerySession* release_startquerysession();
  void set_allocated_startquerysession(::Protobuf::StartQuerySession* startquerysession);

  // optional .Protobuf.ContinueQuerySession continueQuerySession = 6;
  bool has_continuequerysession() const;
  void clear_continuequerysession();
  static const int kContinueQuerySessionFieldNumber = 6;
  const ::Protobuf::ContinueQuerySession& continuequerysession() const;
  ::Protobuf::ContinueQuerySession* mutable_continuequerysession();
  ::Protobuf::ContinueQuerySession* release_continuequerysession();
  void set_allocated_continuequerysession(::Protobuf::ContinueQuerySession* continuequerysession);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Protobuf.QueryRequest)
 private:
  inline void set_has_startquerysession();
  inline void set_has_continuequerysession();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 rqid_;
  ::google::protobuf::int64 querysessionid_;
  int msgtype_;
  union MsgUnion {
    MsgUnion() {}
    ::Protobuf::StartQuerySession* startquerysession_;
    ::Protobuf::ContinueQuerySession* continuequerysession_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static QueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  enum MsgCase {
    kSimpleResponse = 4,
    kRemoteResults = 5,
    MSG_NOT_SET = 0,
  };

  void Swap(QueryResponse* other);

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const { return New(NULL); }

  QueryResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 rqID = 1;
  void clear_rqid();
  static const int kRqIDFieldNumber = 1;
  ::google::protobuf::int64 rqid() const;
  void set_rqid(::google::protobuf::int64 value);

  // optional int64 querySessionID = 2;
  void clear_querysessionid();
  static const int kQuerySessionIDFieldNumber = 2;
  ::google::protobuf::int64 querysessionid() const;
  void set_querysessionid(::google::protobuf::int64 value);

  // optional .Protobuf.MsgType msgType = 3;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 3;
  ::Protobuf::MsgType msgtype() const;
  void set_msgtype(::Protobuf::MsgType value);

  // optional .Protobuf.SimpleResponse simpleResponse = 4;
  bool has_simpleresponse() const;
  void clear_simpleresponse();
  static const int kSimpleResponseFieldNumber = 4;
  const ::Protobuf::SimpleResponse& simpleresponse() const;
  ::Protobuf::SimpleResponse* mutable_simpleresponse();
  ::Protobuf::SimpleResponse* release_simpleresponse();
  void set_allocated_simpleresponse(::Protobuf::SimpleResponse* simpleresponse);

  // optional .Protobuf.RemoteResults remoteResults = 5;
  bool has_remoteresults() const;
  void clear_remoteresults();
  static const int kRemoteResultsFieldNumber = 5;
  const ::Protobuf::RemoteResults& remoteresults() const;
  ::Protobuf::RemoteResults* mutable_remoteresults();
  ::Protobuf::RemoteResults* release_remoteresults();
  void set_allocated_remoteresults(::Protobuf::RemoteResults* remoteresults);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Protobuf.QueryResponse)
 private:
  inline void set_has_simpleresponse();
  inline void set_has_remoteresults();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 rqid_;
  ::google::protobuf::int64 querysessionid_;
  int msgtype_;
  union MsgUnion {
    MsgUnion() {}
    ::Protobuf::SimpleResponse* simpleresponse_;
    ::Protobuf::RemoteResults* remoteresults_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static QueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class SimpleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.SimpleResponse) */ {
 public:
  SimpleResponse();
  virtual ~SimpleResponse();

  SimpleResponse(const SimpleResponse& from);

  inline SimpleResponse& operator=(const SimpleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleResponse& default_instance();

  void Swap(SimpleResponse* other);

  // implements Message ----------------------------------------------

  inline SimpleResponse* New() const { return New(NULL); }

  SimpleResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleResponse& from);
  void MergeFrom(const SimpleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Protobuf.SimpleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static SimpleResponse* default_instance_;
};
// -------------------------------------------------------------------

class StartQuerySession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.StartQuerySession) */ {
 public:
  StartQuerySession();
  virtual ~StartQuerySession();

  StartQuerySession(const StartQuerySession& from);

  inline StartQuerySession& operator=(const StartQuerySession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartQuerySession& default_instance();

  void Swap(StartQuerySession* other);

  // implements Message ----------------------------------------------

  inline StartQuerySession* New() const { return New(NULL); }

  StartQuerySession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartQuerySession& from);
  void MergeFrom(const StartQuerySession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartQuerySession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 queryID = 1;
  void clear_queryid();
  static const int kQueryIDFieldNumber = 1;
  ::google::protobuf::int32 queryid() const;
  void set_queryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protobuf.StartQuerySession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 queryid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static StartQuerySession* default_instance_;
};
// -------------------------------------------------------------------

class ContinueQuerySession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.ContinueQuerySession) */ {
 public:
  ContinueQuerySession();
  virtual ~ContinueQuerySession();

  ContinueQuerySession(const ContinueQuerySession& from);

  inline ContinueQuerySession& operator=(const ContinueQuerySession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContinueQuerySession& default_instance();

  void Swap(ContinueQuerySession* other);

  // implements Message ----------------------------------------------

  inline ContinueQuerySession* New() const { return New(NULL); }

  ContinueQuerySession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContinueQuerySession& from);
  void MergeFrom(const ContinueQuerySession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContinueQuerySession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 taskID = 1;
  int taskid_size() const;
  void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  ::google::protobuf::int32 taskid(int index) const;
  void set_taskid(int index, ::google::protobuf::int32 value);
  void add_taskid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      taskid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_taskid();

  // optional int32 bodyIndex = 2;
  void clear_bodyindex();
  static const int kBodyIndexFieldNumber = 2;
  ::google::protobuf::int32 bodyindex() const;
  void set_bodyindex(::google::protobuf::int32 value);

  // optional int32 operationIndex = 3;
  void clear_operationindex();
  static const int kOperationIndexFieldNumber = 3;
  ::google::protobuf::int32 operationindex() const;
  void set_operationindex(::google::protobuf::int32 value);

  // optional string frameAsString = 4;
  void clear_frameasstring();
  static const int kFrameAsStringFieldNumber = 4;
  const ::std::string& frameasstring() const;
  void set_frameasstring(const ::std::string& value);
  void set_frameasstring(const char* value);
  void set_frameasstring(const char* value, size_t size);
  ::std::string* mutable_frameasstring();
  ::std::string* release_frameasstring();
  void set_allocated_frameasstring(::std::string* frameasstring);

  // @@protoc_insertion_point(class_scope:Protobuf.ContinueQuerySession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > taskid_;
  mutable int _taskid_cached_byte_size_;
  ::google::protobuf::int32 bodyindex_;
  ::google::protobuf::int32 operationindex_;
  ::google::protobuf::internal::ArenaStringPtr frameasstring_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static ContinueQuerySession* default_instance_;
};
// -------------------------------------------------------------------

class RemoteResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.RemoteResults) */ {
 public:
  RemoteResults();
  virtual ~RemoteResults();

  RemoteResults(const RemoteResults& from);

  inline RemoteResults& operator=(const RemoteResults& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteResults& default_instance();

  void Swap(RemoteResults* other);

  // implements Message ----------------------------------------------

  inline RemoteResults* New() const { return New(NULL); }

  RemoteResults* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteResults& from);
  void MergeFrom(const RemoteResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 taskID = 1;
  int taskid_size() const;
  void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  ::google::protobuf::int32 taskid(int index) const;
  void set_taskid(int index, ::google::protobuf::int32 value);
  void add_taskid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      taskid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_taskid();

  // optional string resultAsSet = 2;
  void clear_resultasset();
  static const int kResultAsSetFieldNumber = 2;
  const ::std::string& resultasset() const;
  void set_resultasset(const ::std::string& value);
  void set_resultasset(const char* value);
  void set_resultasset(const char* value, size_t size);
  ::std::string* mutable_resultasset();
  ::std::string* release_resultasset();
  void set_allocated_resultasset(::std::string* resultasset);

  // @@protoc_insertion_point(class_scope:Protobuf.RemoteResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > taskid_;
  mutable int _taskid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr resultasset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static RemoteResults* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRequest

// optional int64 rqID = 1;
inline void QueryRequest::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryRequest::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.rqID)
  return rqid_;
}
inline void QueryRequest::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.rqID)
}

// optional int64 querySessionID = 2;
inline void QueryRequest::clear_querysessionid() {
  querysessionid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryRequest::querysessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.querySessionID)
  return querysessionid_;
}
inline void QueryRequest::set_querysessionid(::google::protobuf::int64 value) {
  
  querysessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.querySessionID)
}

// optional .Protobuf.MsgType msgType = 3;
inline void QueryRequest::clear_msgtype() {
  msgtype_ = 0;
}
inline ::Protobuf::MsgType QueryRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
inline void QueryRequest::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.msgType)
}

// optional .Protobuf.StartQuerySession startQuerySession = 4;
inline bool QueryRequest::has_startquerysession() const {
  return msg_case() == kStartQuerySession;
}
inline void QueryRequest::set_has_startquerysession() {
  _oneof_case_[0] = kStartQuerySession;
}
inline void QueryRequest::clear_startquerysession() {
  if (has_startquerysession()) {
    delete msg_.startquerysession_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::StartQuerySession& QueryRequest::startquerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.startQuerySession)
  return has_startquerysession()
      ? *msg_.startquerysession_
      : ::Protobuf::StartQuerySession::default_instance();
}
inline ::Protobuf::StartQuerySession* QueryRequest::mutable_startquerysession() {
  if (!has_startquerysession()) {
    clear_msg();
    set_has_startquerysession();
    msg_.startquerysession_ = new ::Protobuf::StartQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.startQuerySession)
  return msg_.startquerysession_;
}
inline ::Protobuf::StartQuerySession* QueryRequest::release_startquerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.startQuerySession)
  if (has_startquerysession()) {
    clear_has_msg();
    ::Protobuf::StartQuerySession* temp = msg_.startquerysession_;
    msg_.startquerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryRequest::set_allocated_startquerysession(::Protobuf::StartQuerySession* startquerysession) {
  clear_msg();
  if (startquerysession) {
    set_has_startquerysession();
    msg_.startquerysession_ = startquerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.startQuerySession)
}

// optional .Protobuf.ContinueQuerySession continueQuerySession = 6;
inline bool QueryRequest::has_continuequerysession() const {
  return msg_case() == kContinueQuerySession;
}
inline void QueryRequest::set_has_continuequerysession() {
  _oneof_case_[0] = kContinueQuerySession;
}
inline void QueryRequest::clear_continuequerysession() {
  if (has_continuequerysession()) {
    delete msg_.continuequerysession_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::ContinueQuerySession& QueryRequest::continuequerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.continueQuerySession)
  return has_continuequerysession()
      ? *msg_.continuequerysession_
      : ::Protobuf::ContinueQuerySession::default_instance();
}
inline ::Protobuf::ContinueQuerySession* QueryRequest::mutable_continuequerysession() {
  if (!has_continuequerysession()) {
    clear_msg();
    set_has_continuequerysession();
    msg_.continuequerysession_ = new ::Protobuf::ContinueQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.continueQuerySession)
  return msg_.continuequerysession_;
}
inline ::Protobuf::ContinueQuerySession* QueryRequest::release_continuequerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.continueQuerySession)
  if (has_continuequerysession()) {
    clear_has_msg();
    ::Protobuf::ContinueQuerySession* temp = msg_.continuequerysession_;
    msg_.continuequerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryRequest::set_allocated_continuequerysession(::Protobuf::ContinueQuerySession* continuequerysession) {
  clear_msg();
  if (continuequerysession) {
    set_has_continuequerysession();
    msg_.continuequerysession_ = continuequerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.continueQuerySession)
}

inline bool QueryRequest::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void QueryRequest::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline QueryRequest::MsgCase QueryRequest::msg_case() const {
  return QueryRequest::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryResponse

// optional int64 rqID = 1;
inline void QueryResponse::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryResponse::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.rqID)
  return rqid_;
}
inline void QueryResponse::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.rqID)
}

// optional int64 querySessionID = 2;
inline void QueryResponse::clear_querysessionid() {
  querysessionid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryResponse::querysessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.querySessionID)
  return querysessionid_;
}
inline void QueryResponse::set_querysessionid(::google::protobuf::int64 value) {
  
  querysessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.querySessionID)
}

// optional .Protobuf.MsgType msgType = 3;
inline void QueryResponse::clear_msgtype() {
  msgtype_ = 0;
}
inline ::Protobuf::MsgType QueryResponse::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
inline void QueryResponse::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.msgType)
}

// optional .Protobuf.SimpleResponse simpleResponse = 4;
inline bool QueryResponse::has_simpleresponse() const {
  return msg_case() == kSimpleResponse;
}
inline void QueryResponse::set_has_simpleresponse() {
  _oneof_case_[0] = kSimpleResponse;
}
inline void QueryResponse::clear_simpleresponse() {
  if (has_simpleresponse()) {
    delete msg_.simpleresponse_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::SimpleResponse& QueryResponse::simpleresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.simpleResponse)
  return has_simpleresponse()
      ? *msg_.simpleresponse_
      : ::Protobuf::SimpleResponse::default_instance();
}
inline ::Protobuf::SimpleResponse* QueryResponse::mutable_simpleresponse() {
  if (!has_simpleresponse()) {
    clear_msg();
    set_has_simpleresponse();
    msg_.simpleresponse_ = new ::Protobuf::SimpleResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.simpleResponse)
  return msg_.simpleresponse_;
}
inline ::Protobuf::SimpleResponse* QueryResponse::release_simpleresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.simpleResponse)
  if (has_simpleresponse()) {
    clear_has_msg();
    ::Protobuf::SimpleResponse* temp = msg_.simpleresponse_;
    msg_.simpleresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryResponse::set_allocated_simpleresponse(::Protobuf::SimpleResponse* simpleresponse) {
  clear_msg();
  if (simpleresponse) {
    set_has_simpleresponse();
    msg_.simpleresponse_ = simpleresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.simpleResponse)
}

// optional .Protobuf.RemoteResults remoteResults = 5;
inline bool QueryResponse::has_remoteresults() const {
  return msg_case() == kRemoteResults;
}
inline void QueryResponse::set_has_remoteresults() {
  _oneof_case_[0] = kRemoteResults;
}
inline void QueryResponse::clear_remoteresults() {
  if (has_remoteresults()) {
    delete msg_.remoteresults_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::RemoteResults& QueryResponse::remoteresults() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.remoteResults)
  return has_remoteresults()
      ? *msg_.remoteresults_
      : ::Protobuf::RemoteResults::default_instance();
}
inline ::Protobuf::RemoteResults* QueryResponse::mutable_remoteresults() {
  if (!has_remoteresults()) {
    clear_msg();
    set_has_remoteresults();
    msg_.remoteresults_ = new ::Protobuf::RemoteResults;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.remoteResults)
  return msg_.remoteresults_;
}
inline ::Protobuf::RemoteResults* QueryResponse::release_remoteresults() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.remoteResults)
  if (has_remoteresults()) {
    clear_has_msg();
    ::Protobuf::RemoteResults* temp = msg_.remoteresults_;
    msg_.remoteresults_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryResponse::set_allocated_remoteresults(::Protobuf::RemoteResults* remoteresults) {
  clear_msg();
  if (remoteresults) {
    set_has_remoteresults();
    msg_.remoteresults_ = remoteresults;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.remoteResults)
}

inline bool QueryResponse::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void QueryResponse::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline QueryResponse::MsgCase QueryResponse::msg_case() const {
  return QueryResponse::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimpleResponse

// optional string value = 1;
inline void SimpleResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimpleResponse::value() const {
  // @@protoc_insertion_point(field_get:Protobuf.SimpleResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.SimpleResponse.value)
}
inline void SimpleResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.SimpleResponse.value)
}
inline void SimpleResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.SimpleResponse.value)
}
inline ::std::string* SimpleResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.SimpleResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleResponse::release_value() {
  // @@protoc_insertion_point(field_release:Protobuf.SimpleResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.SimpleResponse.value)
}

// -------------------------------------------------------------------

// StartQuerySession

// optional int32 queryID = 1;
inline void StartQuerySession::clear_queryid() {
  queryid_ = 0;
}
inline ::google::protobuf::int32 StartQuerySession::queryid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySession.queryID)
  return queryid_;
}
inline void StartQuerySession::set_queryid(::google::protobuf::int32 value) {
  
  queryid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySession.queryID)
}

// -------------------------------------------------------------------

// ContinueQuerySession

// repeated int32 taskID = 1;
inline int ContinueQuerySession::taskid_size() const {
  return taskid_.size();
}
inline void ContinueQuerySession::clear_taskid() {
  taskid_.Clear();
}
inline ::google::protobuf::int32 ContinueQuerySession::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.taskID)
  return taskid_.Get(index);
}
inline void ContinueQuerySession::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.taskID)
}
inline void ContinueQuerySession::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.ContinueQuerySession.taskID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ContinueQuerySession::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.ContinueQuerySession.taskID)
  return taskid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ContinueQuerySession::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.ContinueQuerySession.taskID)
  return &taskid_;
}

// optional int32 bodyIndex = 2;
inline void ContinueQuerySession::clear_bodyindex() {
  bodyindex_ = 0;
}
inline ::google::protobuf::int32 ContinueQuerySession::bodyindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.bodyIndex)
  return bodyindex_;
}
inline void ContinueQuerySession::set_bodyindex(::google::protobuf::int32 value) {
  
  bodyindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.bodyIndex)
}

// optional int32 operationIndex = 3;
inline void ContinueQuerySession::clear_operationindex() {
  operationindex_ = 0;
}
inline ::google::protobuf::int32 ContinueQuerySession::operationindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.operationIndex)
  return operationindex_;
}
inline void ContinueQuerySession::set_operationindex(::google::protobuf::int32 value) {
  
  operationindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.operationIndex)
}

// optional string frameAsString = 4;
inline void ContinueQuerySession::clear_frameasstring() {
  frameasstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContinueQuerySession::frameasstring() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySession::set_frameasstring(const ::std::string& value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.frameAsString)
}
inline void ContinueQuerySession::set_frameasstring(const char* value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySession.frameAsString)
}
inline void ContinueQuerySession::set_frameasstring(const char* value, size_t size) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySession.frameAsString)
}
inline ::std::string* ContinueQuerySession::mutable_frameasstring() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContinueQuerySession::release_frameasstring() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySession.frameAsString)
  
  return frameasstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySession::set_allocated_frameasstring(::std::string* frameasstring) {
  if (frameasstring != NULL) {
    
  } else {
    
  }
  frameasstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frameasstring);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySession.frameAsString)
}

// -------------------------------------------------------------------

// RemoteResults

// repeated int32 taskID = 1;
inline int RemoteResults::taskid_size() const {
  return taskid_.size();
}
inline void RemoteResults::clear_taskid() {
  taskid_.Clear();
}
inline ::google::protobuf::int32 RemoteResults::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.RemoteResults.taskID)
  return taskid_.Get(index);
}
inline void RemoteResults::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.RemoteResults.taskID)
}
inline void RemoteResults::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.RemoteResults.taskID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RemoteResults::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.RemoteResults.taskID)
  return taskid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RemoteResults::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.RemoteResults.taskID)
  return &taskid_;
}

// optional string resultAsSet = 2;
inline void RemoteResults::clear_resultasset() {
  resultasset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteResults::resultasset() const {
  // @@protoc_insertion_point(field_get:Protobuf.RemoteResults.resultAsSet)
  return resultasset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteResults::set_resultasset(const ::std::string& value) {
  
  resultasset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.RemoteResults.resultAsSet)
}
inline void RemoteResults::set_resultasset(const char* value) {
  
  resultasset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.RemoteResults.resultAsSet)
}
inline void RemoteResults::set_resultasset(const char* value, size_t size) {
  
  resultasset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.RemoteResults.resultAsSet)
}
inline ::std::string* RemoteResults::mutable_resultasset() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.RemoteResults.resultAsSet)
  return resultasset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteResults::release_resultasset() {
  // @@protoc_insertion_point(field_release:Protobuf.RemoteResults.resultAsSet)
  
  return resultasset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteResults::set_allocated_resultasset(::std::string* resultasset) {
  if (resultasset != NULL) {
    
  } else {
    
  }
  resultasset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultasset);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.RemoteResults.resultAsSet)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Protobuf::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::MsgType>() {
  return ::Protobuf::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageProtocol_2eproto__INCLUDED
