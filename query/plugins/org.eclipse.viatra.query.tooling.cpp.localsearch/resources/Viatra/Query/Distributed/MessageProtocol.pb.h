// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageProtocol.proto

#ifndef PROTOBUF_MessageProtocol_2eproto__INCLUDED
#define PROTOBUF_MessageProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MessageProtocol_2eproto();
void protobuf_AssignDesc_MessageProtocol_2eproto();
void protobuf_ShutdownFile_MessageProtocol_2eproto();

class ContinueQuerySession;
class ContinueQuerySessionResponse;
class InitiateConnection;
class InitiateConnectionResponse;
class QueryRequest;
class QueryResponse;
class StartQuerySession;
class StartQuerySessionResponse;

enum MsgType {
  START_QUERY_SESSION = 0,
  TERMINATE_QUERY_SESSION = 1,
  CONTINUE_QUERY_SESSION = 2,
  INITIATE_CONNECTION = 3,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = START_QUERY_SESSION;
const MsgType MsgType_MAX = INITIATE_CONNECTION;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class QueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  enum MsgCase {
    kInitiateConnection = 5,
    kStartQuerySession = 6,
    kContinueQuerySession = 7,
    MSG_NOT_SET = 0,
  };

  void Swap(QueryRequest* other);

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const { return New(NULL); }

  QueryRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 rqID = 1;
  void clear_rqid();
  static const int kRqIDFieldNumber = 1;
  ::google::protobuf::int64 rqid() const;
  void set_rqid(::google::protobuf::int64 value);

  // optional .Protobuf.MsgType msgType = 2;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  ::Protobuf::MsgType msgtype() const;
  void set_msgtype(::Protobuf::MsgType value);

  // optional .Protobuf.InitiateConnection initiateConnection = 5;
  bool has_initiateconnection() const;
  void clear_initiateconnection();
  static const int kInitiateConnectionFieldNumber = 5;
  const ::Protobuf::InitiateConnection& initiateconnection() const;
  ::Protobuf::InitiateConnection* mutable_initiateconnection();
  ::Protobuf::InitiateConnection* release_initiateconnection();
  void set_allocated_initiateconnection(::Protobuf::InitiateConnection* initiateconnection);

  // optional .Protobuf.StartQuerySession startQuerySession = 6;
  bool has_startquerysession() const;
  void clear_startquerysession();
  static const int kStartQuerySessionFieldNumber = 6;
  const ::Protobuf::StartQuerySession& startquerysession() const;
  ::Protobuf::StartQuerySession* mutable_startquerysession();
  ::Protobuf::StartQuerySession* release_startquerysession();
  void set_allocated_startquerysession(::Protobuf::StartQuerySession* startquerysession);

  // optional .Protobuf.ContinueQuerySession continueQuerySession = 7;
  bool has_continuequerysession() const;
  void clear_continuequerysession();
  static const int kContinueQuerySessionFieldNumber = 7;
  const ::Protobuf::ContinueQuerySession& continuequerysession() const;
  ::Protobuf::ContinueQuerySession* mutable_continuequerysession();
  ::Protobuf::ContinueQuerySession* release_continuequerysession();
  void set_allocated_continuequerysession(::Protobuf::ContinueQuerySession* continuequerysession);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Protobuf.QueryRequest)
 private:
  inline void set_has_initiateconnection();
  inline void set_has_startquerysession();
  inline void set_has_continuequerysession();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 rqid_;
  int msgtype_;
  union MsgUnion {
    MsgUnion() {}
    ::Protobuf::InitiateConnection* initiateconnection_;
    ::Protobuf::StartQuerySession* startquerysession_;
    ::Protobuf::ContinueQuerySession* continuequerysession_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static QueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  enum MsgCase {
    kInitiateConnectionResponse = 5,
    kStartQuerySessionResponse = 6,
    kContinueQuerySessionResponse = 7,
    MSG_NOT_SET = 0,
  };

  void Swap(QueryResponse* other);

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const { return New(NULL); }

  QueryResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 rqID = 1;
  void clear_rqid();
  static const int kRqIDFieldNumber = 1;
  ::google::protobuf::int64 rqid() const;
  void set_rqid(::google::protobuf::int64 value);

  // optional .Protobuf.MsgType msgType = 3;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 3;
  ::Protobuf::MsgType msgtype() const;
  void set_msgtype(::Protobuf::MsgType value);

  // optional .Protobuf.InitiateConnectionResponse initiateConnectionResponse = 5;
  bool has_initiateconnectionresponse() const;
  void clear_initiateconnectionresponse();
  static const int kInitiateConnectionResponseFieldNumber = 5;
  const ::Protobuf::InitiateConnectionResponse& initiateconnectionresponse() const;
  ::Protobuf::InitiateConnectionResponse* mutable_initiateconnectionresponse();
  ::Protobuf::InitiateConnectionResponse* release_initiateconnectionresponse();
  void set_allocated_initiateconnectionresponse(::Protobuf::InitiateConnectionResponse* initiateconnectionresponse);

  // optional .Protobuf.StartQuerySessionResponse startQuerySessionResponse = 6;
  bool has_startquerysessionresponse() const;
  void clear_startquerysessionresponse();
  static const int kStartQuerySessionResponseFieldNumber = 6;
  const ::Protobuf::StartQuerySessionResponse& startquerysessionresponse() const;
  ::Protobuf::StartQuerySessionResponse* mutable_startquerysessionresponse();
  ::Protobuf::StartQuerySessionResponse* release_startquerysessionresponse();
  void set_allocated_startquerysessionresponse(::Protobuf::StartQuerySessionResponse* startquerysessionresponse);

  // optional .Protobuf.ContinueQuerySessionResponse continueQuerySessionResponse = 7;
  bool has_continuequerysessionresponse() const;
  void clear_continuequerysessionresponse();
  static const int kContinueQuerySessionResponseFieldNumber = 7;
  const ::Protobuf::ContinueQuerySessionResponse& continuequerysessionresponse() const;
  ::Protobuf::ContinueQuerySessionResponse* mutable_continuequerysessionresponse();
  ::Protobuf::ContinueQuerySessionResponse* release_continuequerysessionresponse();
  void set_allocated_continuequerysessionresponse(::Protobuf::ContinueQuerySessionResponse* continuequerysessionresponse);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Protobuf.QueryResponse)
 private:
  inline void set_has_initiateconnectionresponse();
  inline void set_has_startquerysessionresponse();
  inline void set_has_continuequerysessionresponse();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 rqid_;
  int msgtype_;
  union MsgUnion {
    MsgUnion() {}
    ::Protobuf::InitiateConnectionResponse* initiateconnectionresponse_;
    ::Protobuf::StartQuerySessionResponse* startquerysessionresponse_;
    ::Protobuf::ContinueQuerySessionResponse* continuequerysessionresponse_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static QueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class InitiateConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.InitiateConnection) */ {
 public:
  InitiateConnection();
  virtual ~InitiateConnection();

  InitiateConnection(const InitiateConnection& from);

  inline InitiateConnection& operator=(const InitiateConnection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitiateConnection& default_instance();

  void Swap(InitiateConnection* other);

  // implements Message ----------------------------------------------

  inline InitiateConnection* New() const { return New(NULL); }

  InitiateConnection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitiateConnection& from);
  void MergeFrom(const InitiateConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitiateConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nodeName = 1;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // @@protoc_insertion_point(class_scope:Protobuf.InitiateConnection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static InitiateConnection* default_instance_;
};
// -------------------------------------------------------------------

class InitiateConnectionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.InitiateConnectionResponse) */ {
 public:
  InitiateConnectionResponse();
  virtual ~InitiateConnectionResponse();

  InitiateConnectionResponse(const InitiateConnectionResponse& from);

  inline InitiateConnectionResponse& operator=(const InitiateConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitiateConnectionResponse& default_instance();

  void Swap(InitiateConnectionResponse* other);

  // implements Message ----------------------------------------------

  inline InitiateConnectionResponse* New() const { return New(NULL); }

  InitiateConnectionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitiateConnectionResponse& from);
  void MergeFrom(const InitiateConnectionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitiateConnectionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:Protobuf.InitiateConnectionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static InitiateConnectionResponse* default_instance_;
};
// -------------------------------------------------------------------

class StartQuerySession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.StartQuerySession) */ {
 public:
  StartQuerySession();
  virtual ~StartQuerySession();

  StartQuerySession(const StartQuerySession& from);

  inline StartQuerySession& operator=(const StartQuerySession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartQuerySession& default_instance();

  void Swap(StartQuerySession* other);

  // implements Message ----------------------------------------------

  inline StartQuerySession* New() const { return New(NULL); }

  StartQuerySession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartQuerySession& from);
  void MergeFrom(const StartQuerySession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartQuerySession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sessionID = 1;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  ::google::protobuf::int64 sessionid() const;
  void set_sessionid(::google::protobuf::int64 value);

  // optional int32 queryID = 2;
  void clear_queryid();
  static const int kQueryIDFieldNumber = 2;
  ::google::protobuf::int32 queryid() const;
  void set_queryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protobuf.StartQuerySession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 sessionid_;
  ::google::protobuf::int32 queryid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static StartQuerySession* default_instance_;
};
// -------------------------------------------------------------------

class StartQuerySessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.StartQuerySessionResponse) */ {
 public:
  StartQuerySessionResponse();
  virtual ~StartQuerySessionResponse();

  StartQuerySessionResponse(const StartQuerySessionResponse& from);

  inline StartQuerySessionResponse& operator=(const StartQuerySessionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartQuerySessionResponse& default_instance();

  void Swap(StartQuerySessionResponse* other);

  // implements Message ----------------------------------------------

  inline StartQuerySessionResponse* New() const { return New(NULL); }

  StartQuerySessionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartQuerySessionResponse& from);
  void MergeFrom(const StartQuerySessionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartQuerySessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional int64 sessionID = 2;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 2;
  ::google::protobuf::int64 sessionid() const;
  void set_sessionid(::google::protobuf::int64 value);

  // optional int32 queryID = 3;
  void clear_queryid();
  static const int kQueryIDFieldNumber = 3;
  ::google::protobuf::int32 queryid() const;
  void set_queryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protobuf.StartQuerySessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int64 sessionid_;
  ::google::protobuf::int32 queryid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static StartQuerySessionResponse* default_instance_;
};
// -------------------------------------------------------------------

class ContinueQuerySession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.ContinueQuerySession) */ {
 public:
  ContinueQuerySession();
  virtual ~ContinueQuerySession();

  ContinueQuerySession(const ContinueQuerySession& from);

  inline ContinueQuerySession& operator=(const ContinueQuerySession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContinueQuerySession& default_instance();

  void Swap(ContinueQuerySession* other);

  // implements Message ----------------------------------------------

  inline ContinueQuerySession* New() const { return New(NULL); }

  ContinueQuerySession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContinueQuerySession& from);
  void MergeFrom(const ContinueQuerySession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContinueQuerySession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nodeName = 1;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // optional int64 sessionID = 2;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 2;
  ::google::protobuf::int64 sessionid() const;
  void set_sessionid(::google::protobuf::int64 value);

  // repeated int32 taskID = 3;
  int taskid_size() const;
  void clear_taskid();
  static const int kTaskIDFieldNumber = 3;
  ::google::protobuf::int32 taskid(int index) const;
  void set_taskid(int index, ::google::protobuf::int32 value);
  void add_taskid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      taskid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_taskid();

  // optional int32 bodyIndex = 4;
  void clear_bodyindex();
  static const int kBodyIndexFieldNumber = 4;
  ::google::protobuf::int32 bodyindex() const;
  void set_bodyindex(::google::protobuf::int32 value);

  // optional int32 operationIndex = 5;
  void clear_operationindex();
  static const int kOperationIndexFieldNumber = 5;
  ::google::protobuf::int32 operationindex() const;
  void set_operationindex(::google::protobuf::int32 value);

  // optional string frameAsString = 6;
  void clear_frameasstring();
  static const int kFrameAsStringFieldNumber = 6;
  const ::std::string& frameasstring() const;
  void set_frameasstring(const ::std::string& value);
  void set_frameasstring(const char* value);
  void set_frameasstring(const char* value, size_t size);
  ::std::string* mutable_frameasstring();
  ::std::string* release_frameasstring();
  void set_allocated_frameasstring(::std::string* frameasstring);

  // @@protoc_insertion_point(class_scope:Protobuf.ContinueQuerySession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::google::protobuf::int64 sessionid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > taskid_;
  mutable int _taskid_cached_byte_size_;
  ::google::protobuf::int32 bodyindex_;
  ::google::protobuf::int32 operationindex_;
  ::google::protobuf::internal::ArenaStringPtr frameasstring_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static ContinueQuerySession* default_instance_;
};
// -------------------------------------------------------------------

class ContinueQuerySessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protobuf.ContinueQuerySessionResponse) */ {
 public:
  ContinueQuerySessionResponse();
  virtual ~ContinueQuerySessionResponse();

  ContinueQuerySessionResponse(const ContinueQuerySessionResponse& from);

  inline ContinueQuerySessionResponse& operator=(const ContinueQuerySessionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContinueQuerySessionResponse& default_instance();

  void Swap(ContinueQuerySessionResponse* other);

  // implements Message ----------------------------------------------

  inline ContinueQuerySessionResponse* New() const { return New(NULL); }

  ContinueQuerySessionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContinueQuerySessionResponse& from);
  void MergeFrom(const ContinueQuerySessionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContinueQuerySessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional int64 sessionID = 2;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 2;
  ::google::protobuf::int64 sessionid() const;
  void set_sessionid(::google::protobuf::int64 value);

  // repeated int32 taskID = 3;
  int taskid_size() const;
  void clear_taskid();
  static const int kTaskIDFieldNumber = 3;
  ::google::protobuf::int32 taskid(int index) const;
  void set_taskid(int index, ::google::protobuf::int32 value);
  void add_taskid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      taskid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_taskid();

  // optional string resultMatchSet = 4;
  void clear_resultmatchset();
  static const int kResultMatchSetFieldNumber = 4;
  const ::std::string& resultmatchset() const;
  void set_resultmatchset(const ::std::string& value);
  void set_resultmatchset(const char* value);
  void set_resultmatchset(const char* value, size_t size);
  ::std::string* mutable_resultmatchset();
  ::std::string* release_resultmatchset();
  void set_allocated_resultmatchset(::std::string* resultmatchset);

  // optional int32 partIndex = 5;
  void clear_partindex();
  static const int kPartIndexFieldNumber = 5;
  ::google::protobuf::int32 partindex() const;
  void set_partindex(::google::protobuf::int32 value);

  // optional bool isFinalPart = 6;
  void clear_isfinalpart();
  static const int kIsFinalPartFieldNumber = 6;
  bool isfinalpart() const;
  void set_isfinalpart(bool value);

  // @@protoc_insertion_point(class_scope:Protobuf.ContinueQuerySessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::int64 sessionid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > taskid_;
  mutable int _taskid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr resultmatchset_;
  ::google::protobuf::int32 partindex_;
  bool isfinalpart_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageProtocol_2eproto();
  friend void protobuf_AssignDesc_MessageProtocol_2eproto();
  friend void protobuf_ShutdownFile_MessageProtocol_2eproto();

  void InitAsDefaultInstance();
  static ContinueQuerySessionResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRequest

// optional int64 rqID = 1;
inline void QueryRequest::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryRequest::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.rqID)
  return rqid_;
}
inline void QueryRequest::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.rqID)
}

// optional .Protobuf.MsgType msgType = 2;
inline void QueryRequest::clear_msgtype() {
  msgtype_ = 0;
}
inline ::Protobuf::MsgType QueryRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
inline void QueryRequest::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.msgType)
}

// optional .Protobuf.InitiateConnection initiateConnection = 5;
inline bool QueryRequest::has_initiateconnection() const {
  return msg_case() == kInitiateConnection;
}
inline void QueryRequest::set_has_initiateconnection() {
  _oneof_case_[0] = kInitiateConnection;
}
inline void QueryRequest::clear_initiateconnection() {
  if (has_initiateconnection()) {
    delete msg_.initiateconnection_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::InitiateConnection& QueryRequest::initiateconnection() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.initiateConnection)
  return has_initiateconnection()
      ? *msg_.initiateconnection_
      : ::Protobuf::InitiateConnection::default_instance();
}
inline ::Protobuf::InitiateConnection* QueryRequest::mutable_initiateconnection() {
  if (!has_initiateconnection()) {
    clear_msg();
    set_has_initiateconnection();
    msg_.initiateconnection_ = new ::Protobuf::InitiateConnection;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.initiateConnection)
  return msg_.initiateconnection_;
}
inline ::Protobuf::InitiateConnection* QueryRequest::release_initiateconnection() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.initiateConnection)
  if (has_initiateconnection()) {
    clear_has_msg();
    ::Protobuf::InitiateConnection* temp = msg_.initiateconnection_;
    msg_.initiateconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryRequest::set_allocated_initiateconnection(::Protobuf::InitiateConnection* initiateconnection) {
  clear_msg();
  if (initiateconnection) {
    set_has_initiateconnection();
    msg_.initiateconnection_ = initiateconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.initiateConnection)
}

// optional .Protobuf.StartQuerySession startQuerySession = 6;
inline bool QueryRequest::has_startquerysession() const {
  return msg_case() == kStartQuerySession;
}
inline void QueryRequest::set_has_startquerysession() {
  _oneof_case_[0] = kStartQuerySession;
}
inline void QueryRequest::clear_startquerysession() {
  if (has_startquerysession()) {
    delete msg_.startquerysession_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::StartQuerySession& QueryRequest::startquerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.startQuerySession)
  return has_startquerysession()
      ? *msg_.startquerysession_
      : ::Protobuf::StartQuerySession::default_instance();
}
inline ::Protobuf::StartQuerySession* QueryRequest::mutable_startquerysession() {
  if (!has_startquerysession()) {
    clear_msg();
    set_has_startquerysession();
    msg_.startquerysession_ = new ::Protobuf::StartQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.startQuerySession)
  return msg_.startquerysession_;
}
inline ::Protobuf::StartQuerySession* QueryRequest::release_startquerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.startQuerySession)
  if (has_startquerysession()) {
    clear_has_msg();
    ::Protobuf::StartQuerySession* temp = msg_.startquerysession_;
    msg_.startquerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryRequest::set_allocated_startquerysession(::Protobuf::StartQuerySession* startquerysession) {
  clear_msg();
  if (startquerysession) {
    set_has_startquerysession();
    msg_.startquerysession_ = startquerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.startQuerySession)
}

// optional .Protobuf.ContinueQuerySession continueQuerySession = 7;
inline bool QueryRequest::has_continuequerysession() const {
  return msg_case() == kContinueQuerySession;
}
inline void QueryRequest::set_has_continuequerysession() {
  _oneof_case_[0] = kContinueQuerySession;
}
inline void QueryRequest::clear_continuequerysession() {
  if (has_continuequerysession()) {
    delete msg_.continuequerysession_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::ContinueQuerySession& QueryRequest::continuequerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.continueQuerySession)
  return has_continuequerysession()
      ? *msg_.continuequerysession_
      : ::Protobuf::ContinueQuerySession::default_instance();
}
inline ::Protobuf::ContinueQuerySession* QueryRequest::mutable_continuequerysession() {
  if (!has_continuequerysession()) {
    clear_msg();
    set_has_continuequerysession();
    msg_.continuequerysession_ = new ::Protobuf::ContinueQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.continueQuerySession)
  return msg_.continuequerysession_;
}
inline ::Protobuf::ContinueQuerySession* QueryRequest::release_continuequerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.continueQuerySession)
  if (has_continuequerysession()) {
    clear_has_msg();
    ::Protobuf::ContinueQuerySession* temp = msg_.continuequerysession_;
    msg_.continuequerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryRequest::set_allocated_continuequerysession(::Protobuf::ContinueQuerySession* continuequerysession) {
  clear_msg();
  if (continuequerysession) {
    set_has_continuequerysession();
    msg_.continuequerysession_ = continuequerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.continueQuerySession)
}

inline bool QueryRequest::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void QueryRequest::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline QueryRequest::MsgCase QueryRequest::msg_case() const {
  return QueryRequest::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryResponse

// optional int64 rqID = 1;
inline void QueryResponse::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryResponse::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.rqID)
  return rqid_;
}
inline void QueryResponse::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.rqID)
}

// optional .Protobuf.MsgType msgType = 3;
inline void QueryResponse::clear_msgtype() {
  msgtype_ = 0;
}
inline ::Protobuf::MsgType QueryResponse::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
inline void QueryResponse::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.msgType)
}

// optional .Protobuf.InitiateConnectionResponse initiateConnectionResponse = 5;
inline bool QueryResponse::has_initiateconnectionresponse() const {
  return msg_case() == kInitiateConnectionResponse;
}
inline void QueryResponse::set_has_initiateconnectionresponse() {
  _oneof_case_[0] = kInitiateConnectionResponse;
}
inline void QueryResponse::clear_initiateconnectionresponse() {
  if (has_initiateconnectionresponse()) {
    delete msg_.initiateconnectionresponse_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::InitiateConnectionResponse& QueryResponse::initiateconnectionresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.initiateConnectionResponse)
  return has_initiateconnectionresponse()
      ? *msg_.initiateconnectionresponse_
      : ::Protobuf::InitiateConnectionResponse::default_instance();
}
inline ::Protobuf::InitiateConnectionResponse* QueryResponse::mutable_initiateconnectionresponse() {
  if (!has_initiateconnectionresponse()) {
    clear_msg();
    set_has_initiateconnectionresponse();
    msg_.initiateconnectionresponse_ = new ::Protobuf::InitiateConnectionResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.initiateConnectionResponse)
  return msg_.initiateconnectionresponse_;
}
inline ::Protobuf::InitiateConnectionResponse* QueryResponse::release_initiateconnectionresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.initiateConnectionResponse)
  if (has_initiateconnectionresponse()) {
    clear_has_msg();
    ::Protobuf::InitiateConnectionResponse* temp = msg_.initiateconnectionresponse_;
    msg_.initiateconnectionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryResponse::set_allocated_initiateconnectionresponse(::Protobuf::InitiateConnectionResponse* initiateconnectionresponse) {
  clear_msg();
  if (initiateconnectionresponse) {
    set_has_initiateconnectionresponse();
    msg_.initiateconnectionresponse_ = initiateconnectionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.initiateConnectionResponse)
}

// optional .Protobuf.StartQuerySessionResponse startQuerySessionResponse = 6;
inline bool QueryResponse::has_startquerysessionresponse() const {
  return msg_case() == kStartQuerySessionResponse;
}
inline void QueryResponse::set_has_startquerysessionresponse() {
  _oneof_case_[0] = kStartQuerySessionResponse;
}
inline void QueryResponse::clear_startquerysessionresponse() {
  if (has_startquerysessionresponse()) {
    delete msg_.startquerysessionresponse_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::StartQuerySessionResponse& QueryResponse::startquerysessionresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.startQuerySessionResponse)
  return has_startquerysessionresponse()
      ? *msg_.startquerysessionresponse_
      : ::Protobuf::StartQuerySessionResponse::default_instance();
}
inline ::Protobuf::StartQuerySessionResponse* QueryResponse::mutable_startquerysessionresponse() {
  if (!has_startquerysessionresponse()) {
    clear_msg();
    set_has_startquerysessionresponse();
    msg_.startquerysessionresponse_ = new ::Protobuf::StartQuerySessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.startQuerySessionResponse)
  return msg_.startquerysessionresponse_;
}
inline ::Protobuf::StartQuerySessionResponse* QueryResponse::release_startquerysessionresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.startQuerySessionResponse)
  if (has_startquerysessionresponse()) {
    clear_has_msg();
    ::Protobuf::StartQuerySessionResponse* temp = msg_.startquerysessionresponse_;
    msg_.startquerysessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryResponse::set_allocated_startquerysessionresponse(::Protobuf::StartQuerySessionResponse* startquerysessionresponse) {
  clear_msg();
  if (startquerysessionresponse) {
    set_has_startquerysessionresponse();
    msg_.startquerysessionresponse_ = startquerysessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.startQuerySessionResponse)
}

// optional .Protobuf.ContinueQuerySessionResponse continueQuerySessionResponse = 7;
inline bool QueryResponse::has_continuequerysessionresponse() const {
  return msg_case() == kContinueQuerySessionResponse;
}
inline void QueryResponse::set_has_continuequerysessionresponse() {
  _oneof_case_[0] = kContinueQuerySessionResponse;
}
inline void QueryResponse::clear_continuequerysessionresponse() {
  if (has_continuequerysessionresponse()) {
    delete msg_.continuequerysessionresponse_;
    clear_has_msg();
  }
}
inline  const ::Protobuf::ContinueQuerySessionResponse& QueryResponse::continuequerysessionresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.continueQuerySessionResponse)
  return has_continuequerysessionresponse()
      ? *msg_.continuequerysessionresponse_
      : ::Protobuf::ContinueQuerySessionResponse::default_instance();
}
inline ::Protobuf::ContinueQuerySessionResponse* QueryResponse::mutable_continuequerysessionresponse() {
  if (!has_continuequerysessionresponse()) {
    clear_msg();
    set_has_continuequerysessionresponse();
    msg_.continuequerysessionresponse_ = new ::Protobuf::ContinueQuerySessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.continueQuerySessionResponse)
  return msg_.continuequerysessionresponse_;
}
inline ::Protobuf::ContinueQuerySessionResponse* QueryResponse::release_continuequerysessionresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.continueQuerySessionResponse)
  if (has_continuequerysessionresponse()) {
    clear_has_msg();
    ::Protobuf::ContinueQuerySessionResponse* temp = msg_.continuequerysessionresponse_;
    msg_.continuequerysessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueryResponse::set_allocated_continuequerysessionresponse(::Protobuf::ContinueQuerySessionResponse* continuequerysessionresponse) {
  clear_msg();
  if (continuequerysessionresponse) {
    set_has_continuequerysessionresponse();
    msg_.continuequerysessionresponse_ = continuequerysessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.continueQuerySessionResponse)
}

inline bool QueryResponse::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void QueryResponse::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline QueryResponse::MsgCase QueryResponse::msg_case() const {
  return QueryResponse::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InitiateConnection

// optional string nodeName = 1;
inline void InitiateConnection::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitiateConnection::nodename() const {
  // @@protoc_insertion_point(field_get:Protobuf.InitiateConnection.nodeName)
  return nodename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitiateConnection::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.InitiateConnection.nodeName)
}
inline void InitiateConnection::set_nodename(const char* value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.InitiateConnection.nodeName)
}
inline void InitiateConnection::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.InitiateConnection.nodeName)
}
inline ::std::string* InitiateConnection::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.InitiateConnection.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitiateConnection::release_nodename() {
  // @@protoc_insertion_point(field_release:Protobuf.InitiateConnection.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitiateConnection::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.InitiateConnection.nodeName)
}

// -------------------------------------------------------------------

// InitiateConnectionResponse

// optional string message = 1;
inline void InitiateConnectionResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitiateConnectionResponse::message() const {
  // @@protoc_insertion_point(field_get:Protobuf.InitiateConnectionResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitiateConnectionResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.InitiateConnectionResponse.message)
}
inline void InitiateConnectionResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.InitiateConnectionResponse.message)
}
inline void InitiateConnectionResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.InitiateConnectionResponse.message)
}
inline ::std::string* InitiateConnectionResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.InitiateConnectionResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitiateConnectionResponse::release_message() {
  // @@protoc_insertion_point(field_release:Protobuf.InitiateConnectionResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitiateConnectionResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.InitiateConnectionResponse.message)
}

// -------------------------------------------------------------------

// StartQuerySession

// optional int64 sessionID = 1;
inline void StartQuerySession::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StartQuerySession::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySession.sessionID)
  return sessionid_;
}
inline void StartQuerySession::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySession.sessionID)
}

// optional int32 queryID = 2;
inline void StartQuerySession::clear_queryid() {
  queryid_ = 0;
}
inline ::google::protobuf::int32 StartQuerySession::queryid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySession.queryID)
  return queryid_;
}
inline void StartQuerySession::set_queryid(::google::protobuf::int32 value) {
  
  queryid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySession.queryID)
}

// -------------------------------------------------------------------

// StartQuerySessionResponse

// optional string message = 1;
inline void StartQuerySessionResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartQuerySessionResponse::message() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySessionResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartQuerySessionResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySessionResponse.message)
}
inline void StartQuerySessionResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.StartQuerySessionResponse.message)
}
inline void StartQuerySessionResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.StartQuerySessionResponse.message)
}
inline ::std::string* StartQuerySessionResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.StartQuerySessionResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartQuerySessionResponse::release_message() {
  // @@protoc_insertion_point(field_release:Protobuf.StartQuerySessionResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartQuerySessionResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.StartQuerySessionResponse.message)
}

// optional int64 sessionID = 2;
inline void StartQuerySessionResponse::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StartQuerySessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySessionResponse.sessionID)
  return sessionid_;
}
inline void StartQuerySessionResponse::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySessionResponse.sessionID)
}

// optional int32 queryID = 3;
inline void StartQuerySessionResponse::clear_queryid() {
  queryid_ = 0;
}
inline ::google::protobuf::int32 StartQuerySessionResponse::queryid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySessionResponse.queryID)
  return queryid_;
}
inline void StartQuerySessionResponse::set_queryid(::google::protobuf::int32 value) {
  
  queryid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySessionResponse.queryID)
}

// -------------------------------------------------------------------

// ContinueQuerySession

// optional string nodeName = 1;
inline void ContinueQuerySession::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContinueQuerySession::nodename() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.nodeName)
  return nodename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySession::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.nodeName)
}
inline void ContinueQuerySession::set_nodename(const char* value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySession.nodeName)
}
inline void ContinueQuerySession::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySession.nodeName)
}
inline ::std::string* ContinueQuerySession::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySession.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContinueQuerySession::release_nodename() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySession.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySession::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySession.nodeName)
}

// optional int64 sessionID = 2;
inline void ContinueQuerySession::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ContinueQuerySession::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.sessionID)
  return sessionid_;
}
inline void ContinueQuerySession::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.sessionID)
}

// repeated int32 taskID = 3;
inline int ContinueQuerySession::taskid_size() const {
  return taskid_.size();
}
inline void ContinueQuerySession::clear_taskid() {
  taskid_.Clear();
}
inline ::google::protobuf::int32 ContinueQuerySession::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.taskID)
  return taskid_.Get(index);
}
inline void ContinueQuerySession::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.taskID)
}
inline void ContinueQuerySession::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.ContinueQuerySession.taskID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ContinueQuerySession::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.ContinueQuerySession.taskID)
  return taskid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ContinueQuerySession::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.ContinueQuerySession.taskID)
  return &taskid_;
}

// optional int32 bodyIndex = 4;
inline void ContinueQuerySession::clear_bodyindex() {
  bodyindex_ = 0;
}
inline ::google::protobuf::int32 ContinueQuerySession::bodyindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.bodyIndex)
  return bodyindex_;
}
inline void ContinueQuerySession::set_bodyindex(::google::protobuf::int32 value) {
  
  bodyindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.bodyIndex)
}

// optional int32 operationIndex = 5;
inline void ContinueQuerySession::clear_operationindex() {
  operationindex_ = 0;
}
inline ::google::protobuf::int32 ContinueQuerySession::operationindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.operationIndex)
  return operationindex_;
}
inline void ContinueQuerySession::set_operationindex(::google::protobuf::int32 value) {
  
  operationindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.operationIndex)
}

// optional string frameAsString = 6;
inline void ContinueQuerySession::clear_frameasstring() {
  frameasstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContinueQuerySession::frameasstring() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySession::set_frameasstring(const ::std::string& value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.frameAsString)
}
inline void ContinueQuerySession::set_frameasstring(const char* value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySession.frameAsString)
}
inline void ContinueQuerySession::set_frameasstring(const char* value, size_t size) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySession.frameAsString)
}
inline ::std::string* ContinueQuerySession::mutable_frameasstring() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContinueQuerySession::release_frameasstring() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySession.frameAsString)
  
  return frameasstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySession::set_allocated_frameasstring(::std::string* frameasstring) {
  if (frameasstring != NULL) {
    
  } else {
    
  }
  frameasstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frameasstring);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySession.frameAsString)
}

// -------------------------------------------------------------------

// ContinueQuerySessionResponse

// optional string status = 1;
inline void ContinueQuerySessionResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContinueQuerySessionResponse::status() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySessionResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.status)
}
inline void ContinueQuerySessionResponse::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySessionResponse.status)
}
inline void ContinueQuerySessionResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySessionResponse.status)
}
inline ::std::string* ContinueQuerySessionResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySessionResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContinueQuerySessionResponse::release_status() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySessionResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySessionResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySessionResponse.status)
}

// optional int64 sessionID = 2;
inline void ContinueQuerySessionResponse::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ContinueQuerySessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.sessionID)
  return sessionid_;
}
inline void ContinueQuerySessionResponse::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.sessionID)
}

// repeated int32 taskID = 3;
inline int ContinueQuerySessionResponse::taskid_size() const {
  return taskid_.size();
}
inline void ContinueQuerySessionResponse::clear_taskid() {
  taskid_.Clear();
}
inline ::google::protobuf::int32 ContinueQuerySessionResponse::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.taskID)
  return taskid_.Get(index);
}
inline void ContinueQuerySessionResponse::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.taskID)
}
inline void ContinueQuerySessionResponse::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.ContinueQuerySessionResponse.taskID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ContinueQuerySessionResponse::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.ContinueQuerySessionResponse.taskID)
  return taskid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ContinueQuerySessionResponse::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.ContinueQuerySessionResponse.taskID)
  return &taskid_;
}

// optional string resultMatchSet = 4;
inline void ContinueQuerySessionResponse::clear_resultmatchset() {
  resultmatchset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContinueQuerySessionResponse::resultmatchset() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
  return resultmatchset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySessionResponse::set_resultmatchset(const ::std::string& value) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}
inline void ContinueQuerySessionResponse::set_resultmatchset(const char* value) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}
inline void ContinueQuerySessionResponse::set_resultmatchset(const char* value, size_t size) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}
inline ::std::string* ContinueQuerySessionResponse::mutable_resultmatchset() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
  return resultmatchset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContinueQuerySessionResponse::release_resultmatchset() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
  
  return resultmatchset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueQuerySessionResponse::set_allocated_resultmatchset(::std::string* resultmatchset) {
  if (resultmatchset != NULL) {
    
  } else {
    
  }
  resultmatchset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmatchset);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}

// optional int32 partIndex = 5;
inline void ContinueQuerySessionResponse::clear_partindex() {
  partindex_ = 0;
}
inline ::google::protobuf::int32 ContinueQuerySessionResponse::partindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.partIndex)
  return partindex_;
}
inline void ContinueQuerySessionResponse::set_partindex(::google::protobuf::int32 value) {
  
  partindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.partIndex)
}

// optional bool isFinalPart = 6;
inline void ContinueQuerySessionResponse::clear_isfinalpart() {
  isfinalpart_ = false;
}
inline bool ContinueQuerySessionResponse::isfinalpart() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.isFinalPart)
  return isfinalpart_;
}
inline void ContinueQuerySessionResponse::set_isfinalpart(bool value) {
  
  isfinalpart_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.isFinalPart)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Protobuf::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protobuf::MsgType>() {
  return ::Protobuf::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageProtocol_2eproto__INCLUDED
