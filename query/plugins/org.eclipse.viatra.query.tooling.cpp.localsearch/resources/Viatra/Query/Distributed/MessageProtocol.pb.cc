// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

namespace {

const ::google::protobuf::Descriptor* QueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRequest_reflection_ = NULL;
struct QueryRequestOneofInstance {
  const ::Protobuf::StartQuerySession* startquerysession_;
  const ::Protobuf::ContinueQuerySession* continuequerysession_;
}* QueryRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* QueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResponse_reflection_ = NULL;
struct QueryResponseOneofInstance {
  const ::Protobuf::SimpleResponse* simpleresponse_;
  const ::Protobuf::RemoteResults* remoteresults_;
}* QueryResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SimpleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartQuerySession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartQuerySession_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContinueQuerySession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContinueQuerySession_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteResults_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageProtocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MessageProtocol_2eproto() {
  protobuf_AddDesc_MessageProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  QueryRequest_descriptor_ = file->message_type(0);
  static const int QueryRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, rqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, querysessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, msgtype_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryRequest_default_oneof_instance_, startquerysession_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryRequest_default_oneof_instance_, continuequerysession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, msg_),
  };
  QueryRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryRequest_descriptor_,
      QueryRequest::default_instance_,
      QueryRequest_offsets_,
      -1,
      -1,
      -1,
      QueryRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _oneof_case_[0]),
      sizeof(QueryRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _is_default_instance_));
  QueryResponse_descriptor_ = file->message_type(1);
  static const int QueryResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, rqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, querysessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, msgtype_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryResponse_default_oneof_instance_, simpleresponse_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryResponse_default_oneof_instance_, remoteresults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, msg_),
  };
  QueryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryResponse_descriptor_,
      QueryResponse::default_instance_,
      QueryResponse_offsets_,
      -1,
      -1,
      -1,
      QueryResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _oneof_case_[0]),
      sizeof(QueryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _is_default_instance_));
  SimpleResponse_descriptor_ = file->message_type(2);
  static const int SimpleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, value_),
  };
  SimpleResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleResponse_descriptor_,
      SimpleResponse::default_instance_,
      SimpleResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, _is_default_instance_));
  StartQuerySession_descriptor_ = file->message_type(3);
  static const int StartQuerySession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySession, queryid_),
  };
  StartQuerySession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartQuerySession_descriptor_,
      StartQuerySession::default_instance_,
      StartQuerySession_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartQuerySession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySession, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySession, _is_default_instance_));
  ContinueQuerySession_descriptor_ = file->message_type(4);
  static const int ContinueQuerySession_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, bodyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, operationindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, frameasstring_),
  };
  ContinueQuerySession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContinueQuerySession_descriptor_,
      ContinueQuerySession::default_instance_,
      ContinueQuerySession_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContinueQuerySession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, _is_default_instance_));
  RemoteResults_descriptor_ = file->message_type(5);
  static const int RemoteResults_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResults, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResults, resultmatchset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResults, partindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResults, isfinalpart_),
  };
  RemoteResults_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemoteResults_descriptor_,
      RemoteResults::default_instance_,
      RemoteResults_offsets_,
      -1,
      -1,
      -1,
      sizeof(RemoteResults),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResults, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResults, _is_default_instance_));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryRequest_descriptor_, &QueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryResponse_descriptor_, &QueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleResponse_descriptor_, &SimpleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartQuerySession_descriptor_, &StartQuerySession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContinueQuerySession_descriptor_, &ContinueQuerySession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoteResults_descriptor_, &RemoteResults::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageProtocol_2eproto() {
  delete QueryRequest::default_instance_;
  delete QueryRequest_default_oneof_instance_;
  delete QueryRequest_reflection_;
  delete QueryResponse::default_instance_;
  delete QueryResponse_default_oneof_instance_;
  delete QueryResponse_reflection_;
  delete SimpleResponse::default_instance_;
  delete SimpleResponse_reflection_;
  delete StartQuerySession::default_instance_;
  delete StartQuerySession_reflection_;
  delete ContinueQuerySession::default_instance_;
  delete ContinueQuerySession_reflection_;
  delete RemoteResults::default_instance_;
  delete RemoteResults_reflection_;
}

void protobuf_AddDesc_MessageProtocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MessageProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MessageProtocol.proto\022\010Protobuf\"\331\001\n\014Qu"
    "eryRequest\022\014\n\004rqID\030\001 \001(\003\022\026\n\016querySession"
    "ID\030\002 \001(\003\022\"\n\007msgType\030\003 \001(\0162\021.Protobuf.Msg"
    "Type\0228\n\021startQuerySession\030\004 \001(\0132\033.Protob"
    "uf.StartQuerySessionH\000\022>\n\024continueQueryS"
    "ession\030\006 \001(\0132\036.Protobuf.ContinueQuerySes"
    "sionH\000B\005\n\003msg\"\306\001\n\rQueryResponse\022\014\n\004rqID\030"
    "\001 \001(\003\022\026\n\016querySessionID\030\002 \001(\003\022\"\n\007msgType"
    "\030\003 \001(\0162\021.Protobuf.MsgType\0222\n\016simpleRespo"
    "nse\030\004 \001(\0132\030.Protobuf.SimpleResponseH\000\0220\n"
    "\rremoteResults\030\005 \001(\0132\027.Protobuf.RemoteRe"
    "sultsH\000B\005\n\003msg\"\037\n\016SimpleResponse\022\r\n\005valu"
    "e\030\001 \001(\t\"$\n\021StartQuerySession\022\017\n\007queryID\030"
    "\001 \001(\005\"h\n\024ContinueQuerySession\022\016\n\006taskID\030"
    "\001 \003(\005\022\021\n\tbodyIndex\030\002 \001(\005\022\026\n\016operationInd"
    "ex\030\003 \001(\005\022\025\n\rframeAsString\030\004 \001(\t\"_\n\rRemot"
    "eResults\022\016\n\006taskID\030\001 \003(\005\022\026\n\016resultMatchS"
    "et\030\002 \001(\t\022\021\n\tpartIndex\030\003 \001(\005\022\023\n\013isFinalPa"
    "rt\030\004 \001(\010*[\n\007MsgType\022\027\n\023START_QUERY_SESSI"
    "ON\020\000\022\033\n\027TERMINATE_QUERY_SESSION\020\001\022\032\n\026CON"
    "TINUE_QUERY_SESSION\020\002b\006proto3", 829);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageProtocol.proto", &protobuf_RegisterTypes);
  QueryRequest::default_instance_ = new QueryRequest();
  QueryRequest_default_oneof_instance_ = new QueryRequestOneofInstance();
  QueryResponse::default_instance_ = new QueryResponse();
  QueryResponse_default_oneof_instance_ = new QueryResponseOneofInstance();
  SimpleResponse::default_instance_ = new SimpleResponse();
  StartQuerySession::default_instance_ = new StartQuerySession();
  ContinueQuerySession::default_instance_ = new ContinueQuerySession();
  RemoteResults::default_instance_ = new RemoteResults();
  QueryRequest::default_instance_->InitAsDefaultInstance();
  QueryResponse::default_instance_->InitAsDefaultInstance();
  SimpleResponse::default_instance_->InitAsDefaultInstance();
  StartQuerySession::default_instance_->InitAsDefaultInstance();
  ContinueQuerySession::default_instance_->InitAsDefaultInstance();
  RemoteResults::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageProtocol_2eproto {
  StaticDescriptorInitializer_MessageProtocol_2eproto() {
    protobuf_AddDesc_MessageProtocol_2eproto();
  }
} static_descriptor_initializer_MessageProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRequest::kRqIDFieldNumber;
const int QueryRequest::kQuerySessionIDFieldNumber;
const int QueryRequest::kMsgTypeFieldNumber;
const int QueryRequest::kStartQuerySessionFieldNumber;
const int QueryRequest::kContinueQuerySessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRequest::QueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.QueryRequest)
}

void QueryRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  QueryRequest_default_oneof_instance_->startquerysession_ = const_cast< ::Protobuf::StartQuerySession*>(&::Protobuf::StartQuerySession::default_instance());
  QueryRequest_default_oneof_instance_->continuequerysession_ = const_cast< ::Protobuf::ContinueQuerySession*>(&::Protobuf::ContinueQuerySession::default_instance());
}

QueryRequest::QueryRequest(const QueryRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.QueryRequest)
}

void QueryRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rqid_ = GOOGLE_LONGLONG(0);
  querysessionid_ = GOOGLE_LONGLONG(0);
  msgtype_ = 0;
  clear_has_msg();
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:Protobuf.QueryRequest)
  SharedDtor();
}

void QueryRequest::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void QueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRequest_descriptor_;
}

const QueryRequest& QueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

QueryRequest* QueryRequest::default_instance_ = NULL;

QueryRequest* QueryRequest::New(::google::protobuf::Arena* arena) const {
  QueryRequest* n = new QueryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRequest::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Protobuf.QueryRequest)
  switch(msg_case()) {
    case kStartQuerySession: {
      delete msg_.startquerysession_;
      break;
    }
    case kContinueQuerySession: {
      delete msg_.continuequerysession_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.QueryRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rqid_, msgtype_);

#undef ZR_HELPER_
#undef ZR_

  clear_msg();
}

bool QueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.QueryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rqID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_querySessionID;
        break;
      }

      // optional int64 querySessionID = 2;
      case 2: {
        if (tag == 16) {
         parse_querySessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &querysessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgType;
        break;
      }

      // optional .Protobuf.MsgType msgType = 3;
      case 3: {
        if (tag == 24) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::Protobuf::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startQuerySession;
        break;
      }

      // optional .Protobuf.StartQuerySession startQuerySession = 4;
      case 4: {
        if (tag == 34) {
         parse_startQuerySession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startquerysession()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_continueQuerySession;
        break;
      }

      // optional .Protobuf.ContinueQuerySession continueQuerySession = 6;
      case 6: {
        if (tag == 50) {
         parse_continueQuerySession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continuequerysession()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.QueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.QueryRequest)
  return false;
#undef DO_
}

void QueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.QueryRequest)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rqid(), output);
  }

  // optional int64 querySessionID = 2;
  if (this->querysessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->querysessionid(), output);
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->msgtype(), output);
  }

  // optional .Protobuf.StartQuerySession startQuerySession = 4;
  if (has_startquerysession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.startquerysession_, output);
  }

  // optional .Protobuf.ContinueQuerySession continueQuerySession = 6;
  if (has_continuequerysession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_.continuequerysession_, output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.QueryRequest)
}

::google::protobuf::uint8* QueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.QueryRequest)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rqid(), target);
  }

  // optional int64 querySessionID = 2;
  if (this->querysessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->querysessionid(), target);
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->msgtype(), target);
  }

  // optional .Protobuf.StartQuerySession startQuerySession = 4;
  if (has_startquerysession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *msg_.startquerysession_, false, target);
  }

  // optional .Protobuf.ContinueQuerySession continueQuerySession = 6;
  if (has_continuequerysession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *msg_.continuequerysession_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.QueryRequest)
  return target;
}

int QueryRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.QueryRequest)
  int total_size = 0;

  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rqid());
  }

  // optional int64 querySessionID = 2;
  if (this->querysessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->querysessionid());
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  switch (msg_case()) {
    // optional .Protobuf.StartQuerySession startQuerySession = 4;
    case kStartQuerySession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.startquerysession_);
      break;
    }
    // optional .Protobuf.ContinueQuerySession continueQuerySession = 6;
    case kContinueQuerySession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.continuequerysession_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.QueryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.QueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.QueryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kStartQuerySession: {
      mutable_startquerysession()->::Protobuf::StartQuerySession::MergeFrom(from.startquerysession());
      break;
    }
    case kContinueQuerySession: {
      mutable_continuequerysession()->::Protobuf::ContinueQuerySession::MergeFrom(from.continuequerysession());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from.rqid() != 0) {
    set_rqid(from.rqid());
  }
  if (from.querysessionid() != 0) {
    set_querysessionid(from.querysessionid());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void QueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {

  return true;
}

void QueryRequest::Swap(QueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRequest::InternalSwap(QueryRequest* other) {
  std::swap(rqid_, other->rqid_);
  std::swap(querysessionid_, other->querysessionid_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRequest_descriptor_;
  metadata.reflection = QueryRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRequest

// optional int64 rqID = 1;
void QueryRequest::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryRequest::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.rqID)
  return rqid_;
}
 void QueryRequest::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.rqID)
}

// optional int64 querySessionID = 2;
void QueryRequest::clear_querysessionid() {
  querysessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryRequest::querysessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.querySessionID)
  return querysessionid_;
}
 void QueryRequest::set_querysessionid(::google::protobuf::int64 value) {
  
  querysessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.querySessionID)
}

// optional .Protobuf.MsgType msgType = 3;
void QueryRequest::clear_msgtype() {
  msgtype_ = 0;
}
 ::Protobuf::MsgType QueryRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
 void QueryRequest::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.msgType)
}

// optional .Protobuf.StartQuerySession startQuerySession = 4;
bool QueryRequest::has_startquerysession() const {
  return msg_case() == kStartQuerySession;
}
void QueryRequest::set_has_startquerysession() {
  _oneof_case_[0] = kStartQuerySession;
}
void QueryRequest::clear_startquerysession() {
  if (has_startquerysession()) {
    delete msg_.startquerysession_;
    clear_has_msg();
  }
}
 const ::Protobuf::StartQuerySession& QueryRequest::startquerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.startQuerySession)
  return has_startquerysession()
      ? *msg_.startquerysession_
      : ::Protobuf::StartQuerySession::default_instance();
}
::Protobuf::StartQuerySession* QueryRequest::mutable_startquerysession() {
  if (!has_startquerysession()) {
    clear_msg();
    set_has_startquerysession();
    msg_.startquerysession_ = new ::Protobuf::StartQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.startQuerySession)
  return msg_.startquerysession_;
}
::Protobuf::StartQuerySession* QueryRequest::release_startquerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.startQuerySession)
  if (has_startquerysession()) {
    clear_has_msg();
    ::Protobuf::StartQuerySession* temp = msg_.startquerysession_;
    msg_.startquerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryRequest::set_allocated_startquerysession(::Protobuf::StartQuerySession* startquerysession) {
  clear_msg();
  if (startquerysession) {
    set_has_startquerysession();
    msg_.startquerysession_ = startquerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.startQuerySession)
}

// optional .Protobuf.ContinueQuerySession continueQuerySession = 6;
bool QueryRequest::has_continuequerysession() const {
  return msg_case() == kContinueQuerySession;
}
void QueryRequest::set_has_continuequerysession() {
  _oneof_case_[0] = kContinueQuerySession;
}
void QueryRequest::clear_continuequerysession() {
  if (has_continuequerysession()) {
    delete msg_.continuequerysession_;
    clear_has_msg();
  }
}
 const ::Protobuf::ContinueQuerySession& QueryRequest::continuequerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.continueQuerySession)
  return has_continuequerysession()
      ? *msg_.continuequerysession_
      : ::Protobuf::ContinueQuerySession::default_instance();
}
::Protobuf::ContinueQuerySession* QueryRequest::mutable_continuequerysession() {
  if (!has_continuequerysession()) {
    clear_msg();
    set_has_continuequerysession();
    msg_.continuequerysession_ = new ::Protobuf::ContinueQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.continueQuerySession)
  return msg_.continuequerysession_;
}
::Protobuf::ContinueQuerySession* QueryRequest::release_continuequerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.continueQuerySession)
  if (has_continuequerysession()) {
    clear_has_msg();
    ::Protobuf::ContinueQuerySession* temp = msg_.continuequerysession_;
    msg_.continuequerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryRequest::set_allocated_continuequerysession(::Protobuf::ContinueQuerySession* continuequerysession) {
  clear_msg();
  if (continuequerysession) {
    set_has_continuequerysession();
    msg_.continuequerysession_ = continuequerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.continueQuerySession)
}

bool QueryRequest::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void QueryRequest::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
QueryRequest::MsgCase QueryRequest::msg_case() const {
  return QueryRequest::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResponse::kRqIDFieldNumber;
const int QueryResponse::kQuerySessionIDFieldNumber;
const int QueryResponse::kMsgTypeFieldNumber;
const int QueryResponse::kSimpleResponseFieldNumber;
const int QueryResponse::kRemoteResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResponse::QueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.QueryResponse)
}

void QueryResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  QueryResponse_default_oneof_instance_->simpleresponse_ = const_cast< ::Protobuf::SimpleResponse*>(&::Protobuf::SimpleResponse::default_instance());
  QueryResponse_default_oneof_instance_->remoteresults_ = const_cast< ::Protobuf::RemoteResults*>(&::Protobuf::RemoteResults::default_instance());
}

QueryResponse::QueryResponse(const QueryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.QueryResponse)
}

void QueryResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rqid_ = GOOGLE_LONGLONG(0);
  querysessionid_ = GOOGLE_LONGLONG(0);
  msgtype_ = 0;
  clear_has_msg();
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:Protobuf.QueryResponse)
  SharedDtor();
}

void QueryResponse::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void QueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResponse_descriptor_;
}

const QueryResponse& QueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

QueryResponse* QueryResponse::default_instance_ = NULL;

QueryResponse* QueryResponse::New(::google::protobuf::Arena* arena) const {
  QueryResponse* n = new QueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryResponse::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Protobuf.QueryResponse)
  switch(msg_case()) {
    case kSimpleResponse: {
      delete msg_.simpleresponse_;
      break;
    }
    case kRemoteResults: {
      delete msg_.remoteresults_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.QueryResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rqid_, msgtype_);

#undef ZR_HELPER_
#undef ZR_

  clear_msg();
}

bool QueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.QueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rqID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_querySessionID;
        break;
      }

      // optional int64 querySessionID = 2;
      case 2: {
        if (tag == 16) {
         parse_querySessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &querysessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgType;
        break;
      }

      // optional .Protobuf.MsgType msgType = 3;
      case 3: {
        if (tag == 24) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::Protobuf::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_simpleResponse;
        break;
      }

      // optional .Protobuf.SimpleResponse simpleResponse = 4;
      case 4: {
        if (tag == 34) {
         parse_simpleResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_remoteResults;
        break;
      }

      // optional .Protobuf.RemoteResults remoteResults = 5;
      case 5: {
        if (tag == 42) {
         parse_remoteResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remoteresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.QueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.QueryResponse)
  return false;
#undef DO_
}

void QueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.QueryResponse)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rqid(), output);
  }

  // optional int64 querySessionID = 2;
  if (this->querysessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->querysessionid(), output);
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->msgtype(), output);
  }

  // optional .Protobuf.SimpleResponse simpleResponse = 4;
  if (has_simpleresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.simpleresponse_, output);
  }

  // optional .Protobuf.RemoteResults remoteResults = 5;
  if (has_remoteresults()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_.remoteresults_, output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.QueryResponse)
}

::google::protobuf::uint8* QueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.QueryResponse)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rqid(), target);
  }

  // optional int64 querySessionID = 2;
  if (this->querysessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->querysessionid(), target);
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->msgtype(), target);
  }

  // optional .Protobuf.SimpleResponse simpleResponse = 4;
  if (has_simpleresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *msg_.simpleresponse_, false, target);
  }

  // optional .Protobuf.RemoteResults remoteResults = 5;
  if (has_remoteresults()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *msg_.remoteresults_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.QueryResponse)
  return target;
}

int QueryResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.QueryResponse)
  int total_size = 0;

  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rqid());
  }

  // optional int64 querySessionID = 2;
  if (this->querysessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->querysessionid());
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  switch (msg_case()) {
    // optional .Protobuf.SimpleResponse simpleResponse = 4;
    case kSimpleResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.simpleresponse_);
      break;
    }
    // optional .Protobuf.RemoteResults remoteResults = 5;
    case kRemoteResults: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.remoteresults_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.QueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.QueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.QueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kSimpleResponse: {
      mutable_simpleresponse()->::Protobuf::SimpleResponse::MergeFrom(from.simpleresponse());
      break;
    }
    case kRemoteResults: {
      mutable_remoteresults()->::Protobuf::RemoteResults::MergeFrom(from.remoteresults());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from.rqid() != 0) {
    set_rqid(from.rqid());
  }
  if (from.querysessionid() != 0) {
    set_querysessionid(from.querysessionid());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void QueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {

  return true;
}

void QueryResponse::Swap(QueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResponse::InternalSwap(QueryResponse* other) {
  std::swap(rqid_, other->rqid_);
  std::swap(querysessionid_, other->querysessionid_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResponse_descriptor_;
  metadata.reflection = QueryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryResponse

// optional int64 rqID = 1;
void QueryResponse::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryResponse::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.rqID)
  return rqid_;
}
 void QueryResponse::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.rqID)
}

// optional int64 querySessionID = 2;
void QueryResponse::clear_querysessionid() {
  querysessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryResponse::querysessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.querySessionID)
  return querysessionid_;
}
 void QueryResponse::set_querysessionid(::google::protobuf::int64 value) {
  
  querysessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.querySessionID)
}

// optional .Protobuf.MsgType msgType = 3;
void QueryResponse::clear_msgtype() {
  msgtype_ = 0;
}
 ::Protobuf::MsgType QueryResponse::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
 void QueryResponse::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.msgType)
}

// optional .Protobuf.SimpleResponse simpleResponse = 4;
bool QueryResponse::has_simpleresponse() const {
  return msg_case() == kSimpleResponse;
}
void QueryResponse::set_has_simpleresponse() {
  _oneof_case_[0] = kSimpleResponse;
}
void QueryResponse::clear_simpleresponse() {
  if (has_simpleresponse()) {
    delete msg_.simpleresponse_;
    clear_has_msg();
  }
}
 const ::Protobuf::SimpleResponse& QueryResponse::simpleresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.simpleResponse)
  return has_simpleresponse()
      ? *msg_.simpleresponse_
      : ::Protobuf::SimpleResponse::default_instance();
}
::Protobuf::SimpleResponse* QueryResponse::mutable_simpleresponse() {
  if (!has_simpleresponse()) {
    clear_msg();
    set_has_simpleresponse();
    msg_.simpleresponse_ = new ::Protobuf::SimpleResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.simpleResponse)
  return msg_.simpleresponse_;
}
::Protobuf::SimpleResponse* QueryResponse::release_simpleresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.simpleResponse)
  if (has_simpleresponse()) {
    clear_has_msg();
    ::Protobuf::SimpleResponse* temp = msg_.simpleresponse_;
    msg_.simpleresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryResponse::set_allocated_simpleresponse(::Protobuf::SimpleResponse* simpleresponse) {
  clear_msg();
  if (simpleresponse) {
    set_has_simpleresponse();
    msg_.simpleresponse_ = simpleresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.simpleResponse)
}

// optional .Protobuf.RemoteResults remoteResults = 5;
bool QueryResponse::has_remoteresults() const {
  return msg_case() == kRemoteResults;
}
void QueryResponse::set_has_remoteresults() {
  _oneof_case_[0] = kRemoteResults;
}
void QueryResponse::clear_remoteresults() {
  if (has_remoteresults()) {
    delete msg_.remoteresults_;
    clear_has_msg();
  }
}
 const ::Protobuf::RemoteResults& QueryResponse::remoteresults() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.remoteResults)
  return has_remoteresults()
      ? *msg_.remoteresults_
      : ::Protobuf::RemoteResults::default_instance();
}
::Protobuf::RemoteResults* QueryResponse::mutable_remoteresults() {
  if (!has_remoteresults()) {
    clear_msg();
    set_has_remoteresults();
    msg_.remoteresults_ = new ::Protobuf::RemoteResults;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.remoteResults)
  return msg_.remoteresults_;
}
::Protobuf::RemoteResults* QueryResponse::release_remoteresults() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.remoteResults)
  if (has_remoteresults()) {
    clear_has_msg();
    ::Protobuf::RemoteResults* temp = msg_.remoteresults_;
    msg_.remoteresults_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryResponse::set_allocated_remoteresults(::Protobuf::RemoteResults* remoteresults) {
  clear_msg();
  if (remoteresults) {
    set_has_remoteresults();
    msg_.remoteresults_ = remoteresults;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.remoteResults)
}

bool QueryResponse::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void QueryResponse::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
QueryResponse::MsgCase QueryResponse::msg_case() const {
  return QueryResponse::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleResponse::SimpleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.SimpleResponse)
}

void SimpleResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimpleResponse::SimpleResponse(const SimpleResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.SimpleResponse)
}

void SimpleResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SimpleResponse::~SimpleResponse() {
  // @@protoc_insertion_point(destructor:Protobuf.SimpleResponse)
  SharedDtor();
}

void SimpleResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SimpleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleResponse_descriptor_;
}

const SimpleResponse& SimpleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

SimpleResponse* SimpleResponse::default_instance_ = NULL;

SimpleResponse* SimpleResponse::New(::google::protobuf::Arena* arena) const {
  SimpleResponse* n = new SimpleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.SimpleResponse)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SimpleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.SimpleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.SimpleResponse.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.SimpleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.SimpleResponse)
  return false;
#undef DO_
}

void SimpleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.SimpleResponse)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.SimpleResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.SimpleResponse)
}

::google::protobuf::uint8* SimpleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.SimpleResponse)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.SimpleResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.SimpleResponse)
  return target;
}

int SimpleResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.SimpleResponse)
  int total_size = 0;

  // optional string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.SimpleResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.SimpleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.SimpleResponse)
    MergeFrom(*source);
  }
}

void SimpleResponse::MergeFrom(const SimpleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.SimpleResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void SimpleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.SimpleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleResponse::CopyFrom(const SimpleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.SimpleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleResponse::IsInitialized() const {

  return true;
}

void SimpleResponse::Swap(SimpleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleResponse::InternalSwap(SimpleResponse* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleResponse_descriptor_;
  metadata.reflection = SimpleResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleResponse

// optional string value = 1;
void SimpleResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SimpleResponse::value() const {
  // @@protoc_insertion_point(field_get:Protobuf.SimpleResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.SimpleResponse.value)
}
 void SimpleResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.SimpleResponse.value)
}
 void SimpleResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.SimpleResponse.value)
}
 ::std::string* SimpleResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.SimpleResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleResponse::release_value() {
  // @@protoc_insertion_point(field_release:Protobuf.SimpleResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.SimpleResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartQuerySession::kQueryIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartQuerySession::StartQuerySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.StartQuerySession)
}

void StartQuerySession::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartQuerySession::StartQuerySession(const StartQuerySession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.StartQuerySession)
}

void StartQuerySession::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  queryid_ = 0;
}

StartQuerySession::~StartQuerySession() {
  // @@protoc_insertion_point(destructor:Protobuf.StartQuerySession)
  SharedDtor();
}

void StartQuerySession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartQuerySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartQuerySession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartQuerySession_descriptor_;
}

const StartQuerySession& StartQuerySession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

StartQuerySession* StartQuerySession::default_instance_ = NULL;

StartQuerySession* StartQuerySession::New(::google::protobuf::Arena* arena) const {
  StartQuerySession* n = new StartQuerySession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartQuerySession::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.StartQuerySession)
  queryid_ = 0;
}

bool StartQuerySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.StartQuerySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 queryID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queryid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.StartQuerySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.StartQuerySession)
  return false;
#undef DO_
}

void StartQuerySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.StartQuerySession)
  // optional int32 queryID = 1;
  if (this->queryid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queryid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.StartQuerySession)
}

::google::protobuf::uint8* StartQuerySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.StartQuerySession)
  // optional int32 queryID = 1;
  if (this->queryid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queryid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.StartQuerySession)
  return target;
}

int StartQuerySession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.StartQuerySession)
  int total_size = 0;

  // optional int32 queryID = 1;
  if (this->queryid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queryid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartQuerySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.StartQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartQuerySession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartQuerySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.StartQuerySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.StartQuerySession)
    MergeFrom(*source);
  }
}

void StartQuerySession::MergeFrom(const StartQuerySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.StartQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.queryid() != 0) {
    set_queryid(from.queryid());
  }
}

void StartQuerySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.StartQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartQuerySession::CopyFrom(const StartQuerySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.StartQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartQuerySession::IsInitialized() const {

  return true;
}

void StartQuerySession::Swap(StartQuerySession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartQuerySession::InternalSwap(StartQuerySession* other) {
  std::swap(queryid_, other->queryid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartQuerySession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartQuerySession_descriptor_;
  metadata.reflection = StartQuerySession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartQuerySession

// optional int32 queryID = 1;
void StartQuerySession::clear_queryid() {
  queryid_ = 0;
}
 ::google::protobuf::int32 StartQuerySession::queryid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySession.queryID)
  return queryid_;
}
 void StartQuerySession::set_queryid(::google::protobuf::int32 value) {
  
  queryid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySession.queryID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContinueQuerySession::kTaskIDFieldNumber;
const int ContinueQuerySession::kBodyIndexFieldNumber;
const int ContinueQuerySession::kOperationIndexFieldNumber;
const int ContinueQuerySession::kFrameAsStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContinueQuerySession::ContinueQuerySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.ContinueQuerySession)
}

void ContinueQuerySession::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ContinueQuerySession::ContinueQuerySession(const ContinueQuerySession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.ContinueQuerySession)
}

void ContinueQuerySession::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bodyindex_ = 0;
  operationindex_ = 0;
  frameasstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContinueQuerySession::~ContinueQuerySession() {
  // @@protoc_insertion_point(destructor:Protobuf.ContinueQuerySession)
  SharedDtor();
}

void ContinueQuerySession::SharedDtor() {
  frameasstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContinueQuerySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContinueQuerySession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContinueQuerySession_descriptor_;
}

const ContinueQuerySession& ContinueQuerySession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

ContinueQuerySession* ContinueQuerySession::default_instance_ = NULL;

ContinueQuerySession* ContinueQuerySession::New(::google::protobuf::Arena* arena) const {
  ContinueQuerySession* n = new ContinueQuerySession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContinueQuerySession::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.ContinueQuerySession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContinueQuerySession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContinueQuerySession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bodyindex_, operationindex_);
  frameasstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  taskid_.Clear();
}

bool ContinueQuerySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.ContinueQuerySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 taskID = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_taskid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_taskid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bodyIndex;
        break;
      }

      // optional int32 bodyIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_bodyIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bodyindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operationIndex;
        break;
      }

      // optional int32 operationIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_operationIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operationindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frameAsString;
        break;
      }

      // optional string frameAsString = 4;
      case 4: {
        if (tag == 34) {
         parse_frameAsString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frameasstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frameasstring().data(), this->frameasstring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.ContinueQuerySession.frameAsString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.ContinueQuerySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.ContinueQuerySession)
  return false;
#undef DO_
}

void ContinueQuerySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.ContinueQuerySession)
  // repeated int32 taskID = 1;
  if (this->taskid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_taskid_cached_byte_size_);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->taskid(i), output);
  }

  // optional int32 bodyIndex = 2;
  if (this->bodyindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bodyindex(), output);
  }

  // optional int32 operationIndex = 3;
  if (this->operationindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operationindex(), output);
  }

  // optional string frameAsString = 4;
  if (this->frameasstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frameasstring().data(), this->frameasstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySession.frameAsString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frameasstring(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.ContinueQuerySession)
}

::google::protobuf::uint8* ContinueQuerySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.ContinueQuerySession)
  // repeated int32 taskID = 1;
  if (this->taskid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _taskid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->taskid(i), target);
  }

  // optional int32 bodyIndex = 2;
  if (this->bodyindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bodyindex(), target);
  }

  // optional int32 operationIndex = 3;
  if (this->operationindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operationindex(), target);
  }

  // optional string frameAsString = 4;
  if (this->frameasstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frameasstring().data(), this->frameasstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySession.frameAsString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frameasstring(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.ContinueQuerySession)
  return target;
}

int ContinueQuerySession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.ContinueQuerySession)
  int total_size = 0;

  // optional int32 bodyIndex = 2;
  if (this->bodyindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bodyindex());
  }

  // optional int32 operationIndex = 3;
  if (this->operationindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operationindex());
  }

  // optional string frameAsString = 4;
  if (this->frameasstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frameasstring());
  }

  // repeated int32 taskID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->taskid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _taskid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContinueQuerySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.ContinueQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContinueQuerySession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContinueQuerySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.ContinueQuerySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.ContinueQuerySession)
    MergeFrom(*source);
  }
}

void ContinueQuerySession::MergeFrom(const ContinueQuerySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.ContinueQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  taskid_.MergeFrom(from.taskid_);
  if (from.bodyindex() != 0) {
    set_bodyindex(from.bodyindex());
  }
  if (from.operationindex() != 0) {
    set_operationindex(from.operationindex());
  }
  if (from.frameasstring().size() > 0) {

    frameasstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frameasstring_);
  }
}

void ContinueQuerySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.ContinueQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueQuerySession::CopyFrom(const ContinueQuerySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.ContinueQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueQuerySession::IsInitialized() const {

  return true;
}

void ContinueQuerySession::Swap(ContinueQuerySession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContinueQuerySession::InternalSwap(ContinueQuerySession* other) {
  taskid_.UnsafeArenaSwap(&other->taskid_);
  std::swap(bodyindex_, other->bodyindex_);
  std::swap(operationindex_, other->operationindex_);
  frameasstring_.Swap(&other->frameasstring_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContinueQuerySession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContinueQuerySession_descriptor_;
  metadata.reflection = ContinueQuerySession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContinueQuerySession

// repeated int32 taskID = 1;
int ContinueQuerySession::taskid_size() const {
  return taskid_.size();
}
void ContinueQuerySession::clear_taskid() {
  taskid_.Clear();
}
 ::google::protobuf::int32 ContinueQuerySession::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.taskID)
  return taskid_.Get(index);
}
 void ContinueQuerySession::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.taskID)
}
 void ContinueQuerySession::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.ContinueQuerySession.taskID)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ContinueQuerySession::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.ContinueQuerySession.taskID)
  return taskid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ContinueQuerySession::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.ContinueQuerySession.taskID)
  return &taskid_;
}

// optional int32 bodyIndex = 2;
void ContinueQuerySession::clear_bodyindex() {
  bodyindex_ = 0;
}
 ::google::protobuf::int32 ContinueQuerySession::bodyindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.bodyIndex)
  return bodyindex_;
}
 void ContinueQuerySession::set_bodyindex(::google::protobuf::int32 value) {
  
  bodyindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.bodyIndex)
}

// optional int32 operationIndex = 3;
void ContinueQuerySession::clear_operationindex() {
  operationindex_ = 0;
}
 ::google::protobuf::int32 ContinueQuerySession::operationindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.operationIndex)
  return operationindex_;
}
 void ContinueQuerySession::set_operationindex(::google::protobuf::int32 value) {
  
  operationindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.operationIndex)
}

// optional string frameAsString = 4;
void ContinueQuerySession::clear_frameasstring() {
  frameasstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContinueQuerySession::frameasstring() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySession::set_frameasstring(const ::std::string& value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.frameAsString)
}
 void ContinueQuerySession::set_frameasstring(const char* value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySession.frameAsString)
}
 void ContinueQuerySession::set_frameasstring(const char* value, size_t size) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySession.frameAsString)
}
 ::std::string* ContinueQuerySession::mutable_frameasstring() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContinueQuerySession::release_frameasstring() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySession.frameAsString)
  
  return frameasstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySession::set_allocated_frameasstring(::std::string* frameasstring) {
  if (frameasstring != NULL) {
    
  } else {
    
  }
  frameasstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frameasstring);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySession.frameAsString)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteResults::kTaskIDFieldNumber;
const int RemoteResults::kResultMatchSetFieldNumber;
const int RemoteResults::kPartIndexFieldNumber;
const int RemoteResults::kIsFinalPartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteResults::RemoteResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.RemoteResults)
}

void RemoteResults::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RemoteResults::RemoteResults(const RemoteResults& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.RemoteResults)
}

void RemoteResults::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resultmatchset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partindex_ = 0;
  isfinalpart_ = false;
}

RemoteResults::~RemoteResults() {
  // @@protoc_insertion_point(destructor:Protobuf.RemoteResults)
  SharedDtor();
}

void RemoteResults::SharedDtor() {
  resultmatchset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RemoteResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteResults_descriptor_;
}

const RemoteResults& RemoteResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

RemoteResults* RemoteResults::default_instance_ = NULL;

RemoteResults* RemoteResults::New(::google::protobuf::Arena* arena) const {
  RemoteResults* n = new RemoteResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteResults::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.RemoteResults)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RemoteResults, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RemoteResults*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(partindex_, isfinalpart_);
  resultmatchset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  taskid_.Clear();
}

bool RemoteResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.RemoteResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 taskID = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_taskid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_taskid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resultMatchSet;
        break;
      }

      // optional string resultMatchSet = 2;
      case 2: {
        if (tag == 18) {
         parse_resultMatchSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmatchset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resultmatchset().data(), this->resultmatchset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.RemoteResults.resultMatchSet"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_partIndex;
        break;
      }

      // optional int32 partIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_partIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isFinalPart;
        break;
      }

      // optional bool isFinalPart = 4;
      case 4: {
        if (tag == 32) {
         parse_isFinalPart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinalpart_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.RemoteResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.RemoteResults)
  return false;
#undef DO_
}

void RemoteResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.RemoteResults)
  // repeated int32 taskID = 1;
  if (this->taskid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_taskid_cached_byte_size_);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->taskid(i), output);
  }

  // optional string resultMatchSet = 2;
  if (this->resultmatchset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmatchset().data(), this->resultmatchset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.RemoteResults.resultMatchSet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resultmatchset(), output);
  }

  // optional int32 partIndex = 3;
  if (this->partindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partindex(), output);
  }

  // optional bool isFinalPart = 4;
  if (this->isfinalpart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isfinalpart(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.RemoteResults)
}

::google::protobuf::uint8* RemoteResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.RemoteResults)
  // repeated int32 taskID = 1;
  if (this->taskid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _taskid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->taskid(i), target);
  }

  // optional string resultMatchSet = 2;
  if (this->resultmatchset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmatchset().data(), this->resultmatchset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.RemoteResults.resultMatchSet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resultmatchset(), target);
  }

  // optional int32 partIndex = 3;
  if (this->partindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partindex(), target);
  }

  // optional bool isFinalPart = 4;
  if (this->isfinalpart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isfinalpart(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.RemoteResults)
  return target;
}

int RemoteResults::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.RemoteResults)
  int total_size = 0;

  // optional string resultMatchSet = 2;
  if (this->resultmatchset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmatchset());
  }

  // optional int32 partIndex = 3;
  if (this->partindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partindex());
  }

  // optional bool isFinalPart = 4;
  if (this->isfinalpart() != 0) {
    total_size += 1 + 1;
  }

  // repeated int32 taskID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->taskid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _taskid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.RemoteResults)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RemoteResults* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.RemoteResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.RemoteResults)
    MergeFrom(*source);
  }
}

void RemoteResults::MergeFrom(const RemoteResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.RemoteResults)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  taskid_.MergeFrom(from.taskid_);
  if (from.resultmatchset().size() > 0) {

    resultmatchset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmatchset_);
  }
  if (from.partindex() != 0) {
    set_partindex(from.partindex());
  }
  if (from.isfinalpart() != 0) {
    set_isfinalpart(from.isfinalpart());
  }
}

void RemoteResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.RemoteResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteResults::CopyFrom(const RemoteResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.RemoteResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteResults::IsInitialized() const {

  return true;
}

void RemoteResults::Swap(RemoteResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteResults::InternalSwap(RemoteResults* other) {
  taskid_.UnsafeArenaSwap(&other->taskid_);
  resultmatchset_.Swap(&other->resultmatchset_);
  std::swap(partindex_, other->partindex_);
  std::swap(isfinalpart_, other->isfinalpart_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteResults_descriptor_;
  metadata.reflection = RemoteResults_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteResults

// repeated int32 taskID = 1;
int RemoteResults::taskid_size() const {
  return taskid_.size();
}
void RemoteResults::clear_taskid() {
  taskid_.Clear();
}
 ::google::protobuf::int32 RemoteResults::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.RemoteResults.taskID)
  return taskid_.Get(index);
}
 void RemoteResults::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.RemoteResults.taskID)
}
 void RemoteResults::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.RemoteResults.taskID)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RemoteResults::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.RemoteResults.taskID)
  return taskid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RemoteResults::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.RemoteResults.taskID)
  return &taskid_;
}

// optional string resultMatchSet = 2;
void RemoteResults::clear_resultmatchset() {
  resultmatchset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RemoteResults::resultmatchset() const {
  // @@protoc_insertion_point(field_get:Protobuf.RemoteResults.resultMatchSet)
  return resultmatchset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteResults::set_resultmatchset(const ::std::string& value) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.RemoteResults.resultMatchSet)
}
 void RemoteResults::set_resultmatchset(const char* value) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.RemoteResults.resultMatchSet)
}
 void RemoteResults::set_resultmatchset(const char* value, size_t size) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.RemoteResults.resultMatchSet)
}
 ::std::string* RemoteResults::mutable_resultmatchset() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.RemoteResults.resultMatchSet)
  return resultmatchset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RemoteResults::release_resultmatchset() {
  // @@protoc_insertion_point(field_release:Protobuf.RemoteResults.resultMatchSet)
  
  return resultmatchset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteResults::set_allocated_resultmatchset(::std::string* resultmatchset) {
  if (resultmatchset != NULL) {
    
  } else {
    
  }
  resultmatchset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmatchset);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.RemoteResults.resultMatchSet)
}

// optional int32 partIndex = 3;
void RemoteResults::clear_partindex() {
  partindex_ = 0;
}
 ::google::protobuf::int32 RemoteResults::partindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.RemoteResults.partIndex)
  return partindex_;
}
 void RemoteResults::set_partindex(::google::protobuf::int32 value) {
  
  partindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.RemoteResults.partIndex)
}

// optional bool isFinalPart = 4;
void RemoteResults::clear_isfinalpart() {
  isfinalpart_ = false;
}
 bool RemoteResults::isfinalpart() const {
  // @@protoc_insertion_point(field_get:Protobuf.RemoteResults.isFinalPart)
  return isfinalpart_;
}
 void RemoteResults::set_isfinalpart(bool value) {
  
  isfinalpart_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.RemoteResults.isFinalPart)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

// @@protoc_insertion_point(global_scope)
