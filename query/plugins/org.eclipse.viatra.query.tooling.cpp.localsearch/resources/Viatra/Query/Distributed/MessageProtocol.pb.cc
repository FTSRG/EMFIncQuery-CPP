// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protobuf {

namespace {

const ::google::protobuf::Descriptor* QueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRequest_reflection_ = NULL;
struct QueryRequestOneofInstance {
  const ::Protobuf::InitiateConnection* initiateconnection_;
  const ::Protobuf::StartQuerySession* startquerysession_;
  const ::Protobuf::ContinueQuerySession* continuequerysession_;
}* QueryRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* QueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResponse_reflection_ = NULL;
struct QueryResponseOneofInstance {
  const ::Protobuf::InitiateConnectionResponse* initiateconnectionresponse_;
  const ::Protobuf::StartQuerySessionResponse* startquerysessionresponse_;
  const ::Protobuf::ContinueQuerySessionResponse* continuequerysessionresponse_;
}* QueryResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InitiateConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitiateConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitiateConnectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitiateConnectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartQuerySession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartQuerySession_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartQuerySessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartQuerySessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContinueQuerySession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContinueQuerySession_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContinueQuerySessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContinueQuerySessionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageProtocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MessageProtocol_2eproto() {
  protobuf_AddDesc_MessageProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  QueryRequest_descriptor_ = file->message_type(0);
  static const int QueryRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, rqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, msgtype_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryRequest_default_oneof_instance_, initiateconnection_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryRequest_default_oneof_instance_, startquerysession_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryRequest_default_oneof_instance_, continuequerysession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, msg_),
  };
  QueryRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryRequest_descriptor_,
      QueryRequest::default_instance_,
      QueryRequest_offsets_,
      -1,
      -1,
      -1,
      QueryRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _oneof_case_[0]),
      sizeof(QueryRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _is_default_instance_));
  QueryResponse_descriptor_ = file->message_type(1);
  static const int QueryResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, rqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, msgtype_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryResponse_default_oneof_instance_, initiateconnectionresponse_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryResponse_default_oneof_instance_, startquerysessionresponse_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryResponse_default_oneof_instance_, continuequerysessionresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, msg_),
  };
  QueryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryResponse_descriptor_,
      QueryResponse::default_instance_,
      QueryResponse_offsets_,
      -1,
      -1,
      -1,
      QueryResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _oneof_case_[0]),
      sizeof(QueryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _is_default_instance_));
  InitiateConnection_descriptor_ = file->message_type(2);
  static const int InitiateConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateConnection, nodename_),
  };
  InitiateConnection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitiateConnection_descriptor_,
      InitiateConnection::default_instance_,
      InitiateConnection_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitiateConnection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateConnection, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateConnection, _is_default_instance_));
  InitiateConnectionResponse_descriptor_ = file->message_type(3);
  static const int InitiateConnectionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateConnectionResponse, message_),
  };
  InitiateConnectionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitiateConnectionResponse_descriptor_,
      InitiateConnectionResponse::default_instance_,
      InitiateConnectionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitiateConnectionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateConnectionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateConnectionResponse, _is_default_instance_));
  StartQuerySession_descriptor_ = file->message_type(4);
  static const int StartQuerySession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySession, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySession, queryid_),
  };
  StartQuerySession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartQuerySession_descriptor_,
      StartQuerySession::default_instance_,
      StartQuerySession_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartQuerySession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySession, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySession, _is_default_instance_));
  StartQuerySessionResponse_descriptor_ = file->message_type(5);
  static const int StartQuerySessionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySessionResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySessionResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySessionResponse, queryid_),
  };
  StartQuerySessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartQuerySessionResponse_descriptor_,
      StartQuerySessionResponse::default_instance_,
      StartQuerySessionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartQuerySessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySessionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartQuerySessionResponse, _is_default_instance_));
  ContinueQuerySession_descriptor_ = file->message_type(6);
  static const int ContinueQuerySession_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, nodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, bodyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, operationindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, frameasstring_),
  };
  ContinueQuerySession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContinueQuerySession_descriptor_,
      ContinueQuerySession::default_instance_,
      ContinueQuerySession_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContinueQuerySession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySession, _is_default_instance_));
  ContinueQuerySessionResponse_descriptor_ = file->message_type(7);
  static const int ContinueQuerySessionResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, resultmatchset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, partindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, isfinalpart_),
  };
  ContinueQuerySessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContinueQuerySessionResponse_descriptor_,
      ContinueQuerySessionResponse::default_instance_,
      ContinueQuerySessionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContinueQuerySessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueQuerySessionResponse, _is_default_instance_));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryRequest_descriptor_, &QueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryResponse_descriptor_, &QueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitiateConnection_descriptor_, &InitiateConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitiateConnectionResponse_descriptor_, &InitiateConnectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartQuerySession_descriptor_, &StartQuerySession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartQuerySessionResponse_descriptor_, &StartQuerySessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContinueQuerySession_descriptor_, &ContinueQuerySession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContinueQuerySessionResponse_descriptor_, &ContinueQuerySessionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageProtocol_2eproto() {
  delete QueryRequest::default_instance_;
  delete QueryRequest_default_oneof_instance_;
  delete QueryRequest_reflection_;
  delete QueryResponse::default_instance_;
  delete QueryResponse_default_oneof_instance_;
  delete QueryResponse_reflection_;
  delete InitiateConnection::default_instance_;
  delete InitiateConnection_reflection_;
  delete InitiateConnectionResponse::default_instance_;
  delete InitiateConnectionResponse_reflection_;
  delete StartQuerySession::default_instance_;
  delete StartQuerySession_reflection_;
  delete StartQuerySessionResponse::default_instance_;
  delete StartQuerySessionResponse_reflection_;
  delete ContinueQuerySession::default_instance_;
  delete ContinueQuerySession_reflection_;
  delete ContinueQuerySessionResponse::default_instance_;
  delete ContinueQuerySessionResponse_reflection_;
}

void protobuf_AddDesc_MessageProtocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MessageProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MessageProtocol.proto\022\010Protobuf\"\375\001\n\014Qu"
    "eryRequest\022\014\n\004rqID\030\001 \001(\003\022\"\n\007msgType\030\002 \001("
    "\0162\021.Protobuf.MsgType\022:\n\022initiateConnecti"
    "on\030\005 \001(\0132\034.Protobuf.InitiateConnectionH\000"
    "\0228\n\021startQuerySession\030\006 \001(\0132\033.Protobuf.S"
    "tartQuerySessionH\000\022>\n\024continueQuerySessi"
    "on\030\007 \001(\0132\036.Protobuf.ContinueQuerySession"
    "H\000B\005\n\003msg\"\256\002\n\rQueryResponse\022\014\n\004rqID\030\001 \001("
    "\003\022\"\n\007msgType\030\003 \001(\0162\021.Protobuf.MsgType\022J\n"
    "\032initiateConnectionResponse\030\005 \001(\0132$.Prot"
    "obuf.InitiateConnectionResponseH\000\022H\n\031sta"
    "rtQuerySessionResponse\030\006 \001(\0132#.Protobuf."
    "StartQuerySessionResponseH\000\022N\n\034continueQ"
    "uerySessionResponse\030\007 \001(\0132&.Protobuf.Con"
    "tinueQuerySessionResponseH\000B\005\n\003msg\"&\n\022In"
    "itiateConnection\022\020\n\010nodeName\030\001 \001(\t\"-\n\032In"
    "itiateConnectionResponse\022\017\n\007message\030\001 \001("
    "\t\"7\n\021StartQuerySession\022\021\n\tsessionID\030\001 \001("
    "\003\022\017\n\007queryID\030\002 \001(\005\"P\n\031StartQuerySessionR"
    "esponse\022\017\n\007message\030\001 \001(\t\022\021\n\tsessionID\030\002 "
    "\001(\003\022\017\n\007queryID\030\003 \001(\005\"\215\001\n\024ContinueQuerySe"
    "ssion\022\020\n\010nodeName\030\001 \001(\t\022\021\n\tsessionID\030\002 \001"
    "(\003\022\016\n\006taskID\030\003 \003(\005\022\021\n\tbodyIndex\030\004 \001(\005\022\026\n"
    "\016operationIndex\030\005 \001(\005\022\025\n\rframeAsString\030\006"
    " \001(\t\"\221\001\n\034ContinueQuerySessionResponse\022\016\n"
    "\006status\030\001 \001(\t\022\021\n\tsessionID\030\002 \001(\003\022\016\n\006task"
    "ID\030\003 \003(\005\022\026\n\016resultMatchSet\030\004 \001(\t\022\021\n\tpart"
    "Index\030\005 \001(\005\022\023\n\013isFinalPart\030\006 \001(\010*t\n\007MsgT"
    "ype\022\027\n\023START_QUERY_SESSION\020\000\022\033\n\027TERMINAT"
    "E_QUERY_SESSION\020\001\022\032\n\026CONTINUE_QUERY_SESS"
    "ION\020\002\022\027\n\023INITIATE_CONNECTION\020\003b\006proto3", 1238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageProtocol.proto", &protobuf_RegisterTypes);
  QueryRequest::default_instance_ = new QueryRequest();
  QueryRequest_default_oneof_instance_ = new QueryRequestOneofInstance();
  QueryResponse::default_instance_ = new QueryResponse();
  QueryResponse_default_oneof_instance_ = new QueryResponseOneofInstance();
  InitiateConnection::default_instance_ = new InitiateConnection();
  InitiateConnectionResponse::default_instance_ = new InitiateConnectionResponse();
  StartQuerySession::default_instance_ = new StartQuerySession();
  StartQuerySessionResponse::default_instance_ = new StartQuerySessionResponse();
  ContinueQuerySession::default_instance_ = new ContinueQuerySession();
  ContinueQuerySessionResponse::default_instance_ = new ContinueQuerySessionResponse();
  QueryRequest::default_instance_->InitAsDefaultInstance();
  QueryResponse::default_instance_->InitAsDefaultInstance();
  InitiateConnection::default_instance_->InitAsDefaultInstance();
  InitiateConnectionResponse::default_instance_->InitAsDefaultInstance();
  StartQuerySession::default_instance_->InitAsDefaultInstance();
  StartQuerySessionResponse::default_instance_->InitAsDefaultInstance();
  ContinueQuerySession::default_instance_->InitAsDefaultInstance();
  ContinueQuerySessionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageProtocol_2eproto {
  StaticDescriptorInitializer_MessageProtocol_2eproto() {
    protobuf_AddDesc_MessageProtocol_2eproto();
  }
} static_descriptor_initializer_MessageProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRequest::kRqIDFieldNumber;
const int QueryRequest::kMsgTypeFieldNumber;
const int QueryRequest::kInitiateConnectionFieldNumber;
const int QueryRequest::kStartQuerySessionFieldNumber;
const int QueryRequest::kContinueQuerySessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRequest::QueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.QueryRequest)
}

void QueryRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  QueryRequest_default_oneof_instance_->initiateconnection_ = const_cast< ::Protobuf::InitiateConnection*>(&::Protobuf::InitiateConnection::default_instance());
  QueryRequest_default_oneof_instance_->startquerysession_ = const_cast< ::Protobuf::StartQuerySession*>(&::Protobuf::StartQuerySession::default_instance());
  QueryRequest_default_oneof_instance_->continuequerysession_ = const_cast< ::Protobuf::ContinueQuerySession*>(&::Protobuf::ContinueQuerySession::default_instance());
}

QueryRequest::QueryRequest(const QueryRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.QueryRequest)
}

void QueryRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rqid_ = GOOGLE_LONGLONG(0);
  msgtype_ = 0;
  clear_has_msg();
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:Protobuf.QueryRequest)
  SharedDtor();
}

void QueryRequest::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void QueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRequest_descriptor_;
}

const QueryRequest& QueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

QueryRequest* QueryRequest::default_instance_ = NULL;

QueryRequest* QueryRequest::New(::google::protobuf::Arena* arena) const {
  QueryRequest* n = new QueryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRequest::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Protobuf.QueryRequest)
  switch(msg_case()) {
    case kInitiateConnection: {
      delete msg_.initiateconnection_;
      break;
    }
    case kStartQuerySession: {
      delete msg_.startquerysession_;
      break;
    }
    case kContinueQuerySession: {
      delete msg_.continuequerysession_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.QueryRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rqid_, msgtype_);

#undef ZR_HELPER_
#undef ZR_

  clear_msg();
}

bool QueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.QueryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rqID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .Protobuf.MsgType msgType = 2;
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::Protobuf::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_initiateConnection;
        break;
      }

      // optional .Protobuf.InitiateConnection initiateConnection = 5;
      case 5: {
        if (tag == 42) {
         parse_initiateConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initiateconnection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_startQuerySession;
        break;
      }

      // optional .Protobuf.StartQuerySession startQuerySession = 6;
      case 6: {
        if (tag == 50) {
         parse_startQuerySession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startquerysession()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_continueQuerySession;
        break;
      }

      // optional .Protobuf.ContinueQuerySession continueQuerySession = 7;
      case 7: {
        if (tag == 58) {
         parse_continueQuerySession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continuequerysession()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.QueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.QueryRequest)
  return false;
#undef DO_
}

void QueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.QueryRequest)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rqid(), output);
  }

  // optional .Protobuf.MsgType msgType = 2;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional .Protobuf.InitiateConnection initiateConnection = 5;
  if (has_initiateconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_.initiateconnection_, output);
  }

  // optional .Protobuf.StartQuerySession startQuerySession = 6;
  if (has_startquerysession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_.startquerysession_, output);
  }

  // optional .Protobuf.ContinueQuerySession continueQuerySession = 7;
  if (has_continuequerysession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *msg_.continuequerysession_, output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.QueryRequest)
}

::google::protobuf::uint8* QueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.QueryRequest)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rqid(), target);
  }

  // optional .Protobuf.MsgType msgType = 2;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional .Protobuf.InitiateConnection initiateConnection = 5;
  if (has_initiateconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *msg_.initiateconnection_, false, target);
  }

  // optional .Protobuf.StartQuerySession startQuerySession = 6;
  if (has_startquerysession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *msg_.startquerysession_, false, target);
  }

  // optional .Protobuf.ContinueQuerySession continueQuerySession = 7;
  if (has_continuequerysession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *msg_.continuequerysession_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.QueryRequest)
  return target;
}

int QueryRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.QueryRequest)
  int total_size = 0;

  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rqid());
  }

  // optional .Protobuf.MsgType msgType = 2;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  switch (msg_case()) {
    // optional .Protobuf.InitiateConnection initiateConnection = 5;
    case kInitiateConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.initiateconnection_);
      break;
    }
    // optional .Protobuf.StartQuerySession startQuerySession = 6;
    case kStartQuerySession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.startquerysession_);
      break;
    }
    // optional .Protobuf.ContinueQuerySession continueQuerySession = 7;
    case kContinueQuerySession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.continuequerysession_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.QueryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.QueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.QueryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kInitiateConnection: {
      mutable_initiateconnection()->::Protobuf::InitiateConnection::MergeFrom(from.initiateconnection());
      break;
    }
    case kStartQuerySession: {
      mutable_startquerysession()->::Protobuf::StartQuerySession::MergeFrom(from.startquerysession());
      break;
    }
    case kContinueQuerySession: {
      mutable_continuequerysession()->::Protobuf::ContinueQuerySession::MergeFrom(from.continuequerysession());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from.rqid() != 0) {
    set_rqid(from.rqid());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void QueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {

  return true;
}

void QueryRequest::Swap(QueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRequest::InternalSwap(QueryRequest* other) {
  std::swap(rqid_, other->rqid_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRequest_descriptor_;
  metadata.reflection = QueryRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRequest

// optional int64 rqID = 1;
void QueryRequest::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryRequest::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.rqID)
  return rqid_;
}
 void QueryRequest::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.rqID)
}

// optional .Protobuf.MsgType msgType = 2;
void QueryRequest::clear_msgtype() {
  msgtype_ = 0;
}
 ::Protobuf::MsgType QueryRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
 void QueryRequest::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryRequest.msgType)
}

// optional .Protobuf.InitiateConnection initiateConnection = 5;
bool QueryRequest::has_initiateconnection() const {
  return msg_case() == kInitiateConnection;
}
void QueryRequest::set_has_initiateconnection() {
  _oneof_case_[0] = kInitiateConnection;
}
void QueryRequest::clear_initiateconnection() {
  if (has_initiateconnection()) {
    delete msg_.initiateconnection_;
    clear_has_msg();
  }
}
 const ::Protobuf::InitiateConnection& QueryRequest::initiateconnection() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.initiateConnection)
  return has_initiateconnection()
      ? *msg_.initiateconnection_
      : ::Protobuf::InitiateConnection::default_instance();
}
::Protobuf::InitiateConnection* QueryRequest::mutable_initiateconnection() {
  if (!has_initiateconnection()) {
    clear_msg();
    set_has_initiateconnection();
    msg_.initiateconnection_ = new ::Protobuf::InitiateConnection;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.initiateConnection)
  return msg_.initiateconnection_;
}
::Protobuf::InitiateConnection* QueryRequest::release_initiateconnection() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.initiateConnection)
  if (has_initiateconnection()) {
    clear_has_msg();
    ::Protobuf::InitiateConnection* temp = msg_.initiateconnection_;
    msg_.initiateconnection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryRequest::set_allocated_initiateconnection(::Protobuf::InitiateConnection* initiateconnection) {
  clear_msg();
  if (initiateconnection) {
    set_has_initiateconnection();
    msg_.initiateconnection_ = initiateconnection;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.initiateConnection)
}

// optional .Protobuf.StartQuerySession startQuerySession = 6;
bool QueryRequest::has_startquerysession() const {
  return msg_case() == kStartQuerySession;
}
void QueryRequest::set_has_startquerysession() {
  _oneof_case_[0] = kStartQuerySession;
}
void QueryRequest::clear_startquerysession() {
  if (has_startquerysession()) {
    delete msg_.startquerysession_;
    clear_has_msg();
  }
}
 const ::Protobuf::StartQuerySession& QueryRequest::startquerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.startQuerySession)
  return has_startquerysession()
      ? *msg_.startquerysession_
      : ::Protobuf::StartQuerySession::default_instance();
}
::Protobuf::StartQuerySession* QueryRequest::mutable_startquerysession() {
  if (!has_startquerysession()) {
    clear_msg();
    set_has_startquerysession();
    msg_.startquerysession_ = new ::Protobuf::StartQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.startQuerySession)
  return msg_.startquerysession_;
}
::Protobuf::StartQuerySession* QueryRequest::release_startquerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.startQuerySession)
  if (has_startquerysession()) {
    clear_has_msg();
    ::Protobuf::StartQuerySession* temp = msg_.startquerysession_;
    msg_.startquerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryRequest::set_allocated_startquerysession(::Protobuf::StartQuerySession* startquerysession) {
  clear_msg();
  if (startquerysession) {
    set_has_startquerysession();
    msg_.startquerysession_ = startquerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.startQuerySession)
}

// optional .Protobuf.ContinueQuerySession continueQuerySession = 7;
bool QueryRequest::has_continuequerysession() const {
  return msg_case() == kContinueQuerySession;
}
void QueryRequest::set_has_continuequerysession() {
  _oneof_case_[0] = kContinueQuerySession;
}
void QueryRequest::clear_continuequerysession() {
  if (has_continuequerysession()) {
    delete msg_.continuequerysession_;
    clear_has_msg();
  }
}
 const ::Protobuf::ContinueQuerySession& QueryRequest::continuequerysession() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryRequest.continueQuerySession)
  return has_continuequerysession()
      ? *msg_.continuequerysession_
      : ::Protobuf::ContinueQuerySession::default_instance();
}
::Protobuf::ContinueQuerySession* QueryRequest::mutable_continuequerysession() {
  if (!has_continuequerysession()) {
    clear_msg();
    set_has_continuequerysession();
    msg_.continuequerysession_ = new ::Protobuf::ContinueQuerySession;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryRequest.continueQuerySession)
  return msg_.continuequerysession_;
}
::Protobuf::ContinueQuerySession* QueryRequest::release_continuequerysession() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryRequest.continueQuerySession)
  if (has_continuequerysession()) {
    clear_has_msg();
    ::Protobuf::ContinueQuerySession* temp = msg_.continuequerysession_;
    msg_.continuequerysession_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryRequest::set_allocated_continuequerysession(::Protobuf::ContinueQuerySession* continuequerysession) {
  clear_msg();
  if (continuequerysession) {
    set_has_continuequerysession();
    msg_.continuequerysession_ = continuequerysession;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryRequest.continueQuerySession)
}

bool QueryRequest::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void QueryRequest::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
QueryRequest::MsgCase QueryRequest::msg_case() const {
  return QueryRequest::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResponse::kRqIDFieldNumber;
const int QueryResponse::kMsgTypeFieldNumber;
const int QueryResponse::kInitiateConnectionResponseFieldNumber;
const int QueryResponse::kStartQuerySessionResponseFieldNumber;
const int QueryResponse::kContinueQuerySessionResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResponse::QueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.QueryResponse)
}

void QueryResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  QueryResponse_default_oneof_instance_->initiateconnectionresponse_ = const_cast< ::Protobuf::InitiateConnectionResponse*>(&::Protobuf::InitiateConnectionResponse::default_instance());
  QueryResponse_default_oneof_instance_->startquerysessionresponse_ = const_cast< ::Protobuf::StartQuerySessionResponse*>(&::Protobuf::StartQuerySessionResponse::default_instance());
  QueryResponse_default_oneof_instance_->continuequerysessionresponse_ = const_cast< ::Protobuf::ContinueQuerySessionResponse*>(&::Protobuf::ContinueQuerySessionResponse::default_instance());
}

QueryResponse::QueryResponse(const QueryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.QueryResponse)
}

void QueryResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rqid_ = GOOGLE_LONGLONG(0);
  msgtype_ = 0;
  clear_has_msg();
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:Protobuf.QueryResponse)
  SharedDtor();
}

void QueryResponse::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void QueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResponse_descriptor_;
}

const QueryResponse& QueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

QueryResponse* QueryResponse::default_instance_ = NULL;

QueryResponse* QueryResponse::New(::google::protobuf::Arena* arena) const {
  QueryResponse* n = new QueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryResponse::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:Protobuf.QueryResponse)
  switch(msg_case()) {
    case kInitiateConnectionResponse: {
      delete msg_.initiateconnectionresponse_;
      break;
    }
    case kStartQuerySessionResponse: {
      delete msg_.startquerysessionresponse_;
      break;
    }
    case kContinueQuerySessionResponse: {
      delete msg_.continuequerysessionresponse_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.QueryResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rqid_, msgtype_);

#undef ZR_HELPER_
#undef ZR_

  clear_msg();
}

bool QueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.QueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rqID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgType;
        break;
      }

      // optional .Protobuf.MsgType msgType = 3;
      case 3: {
        if (tag == 24) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::Protobuf::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_initiateConnectionResponse;
        break;
      }

      // optional .Protobuf.InitiateConnectionResponse initiateConnectionResponse = 5;
      case 5: {
        if (tag == 42) {
         parse_initiateConnectionResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initiateconnectionresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_startQuerySessionResponse;
        break;
      }

      // optional .Protobuf.StartQuerySessionResponse startQuerySessionResponse = 6;
      case 6: {
        if (tag == 50) {
         parse_startQuerySessionResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startquerysessionresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_continueQuerySessionResponse;
        break;
      }

      // optional .Protobuf.ContinueQuerySessionResponse continueQuerySessionResponse = 7;
      case 7: {
        if (tag == 58) {
         parse_continueQuerySessionResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continuequerysessionresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.QueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.QueryResponse)
  return false;
#undef DO_
}

void QueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.QueryResponse)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rqid(), output);
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->msgtype(), output);
  }

  // optional .Protobuf.InitiateConnectionResponse initiateConnectionResponse = 5;
  if (has_initiateconnectionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_.initiateconnectionresponse_, output);
  }

  // optional .Protobuf.StartQuerySessionResponse startQuerySessionResponse = 6;
  if (has_startquerysessionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_.startquerysessionresponse_, output);
  }

  // optional .Protobuf.ContinueQuerySessionResponse continueQuerySessionResponse = 7;
  if (has_continuequerysessionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *msg_.continuequerysessionresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.QueryResponse)
}

::google::protobuf::uint8* QueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.QueryResponse)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rqid(), target);
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->msgtype(), target);
  }

  // optional .Protobuf.InitiateConnectionResponse initiateConnectionResponse = 5;
  if (has_initiateconnectionresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *msg_.initiateconnectionresponse_, false, target);
  }

  // optional .Protobuf.StartQuerySessionResponse startQuerySessionResponse = 6;
  if (has_startquerysessionresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *msg_.startquerysessionresponse_, false, target);
  }

  // optional .Protobuf.ContinueQuerySessionResponse continueQuerySessionResponse = 7;
  if (has_continuequerysessionresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *msg_.continuequerysessionresponse_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.QueryResponse)
  return target;
}

int QueryResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.QueryResponse)
  int total_size = 0;

  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rqid());
  }

  // optional .Protobuf.MsgType msgType = 3;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  switch (msg_case()) {
    // optional .Protobuf.InitiateConnectionResponse initiateConnectionResponse = 5;
    case kInitiateConnectionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.initiateconnectionresponse_);
      break;
    }
    // optional .Protobuf.StartQuerySessionResponse startQuerySessionResponse = 6;
    case kStartQuerySessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.startquerysessionresponse_);
      break;
    }
    // optional .Protobuf.ContinueQuerySessionResponse continueQuerySessionResponse = 7;
    case kContinueQuerySessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.continuequerysessionresponse_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.QueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.QueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.QueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kInitiateConnectionResponse: {
      mutable_initiateconnectionresponse()->::Protobuf::InitiateConnectionResponse::MergeFrom(from.initiateconnectionresponse());
      break;
    }
    case kStartQuerySessionResponse: {
      mutable_startquerysessionresponse()->::Protobuf::StartQuerySessionResponse::MergeFrom(from.startquerysessionresponse());
      break;
    }
    case kContinueQuerySessionResponse: {
      mutable_continuequerysessionresponse()->::Protobuf::ContinueQuerySessionResponse::MergeFrom(from.continuequerysessionresponse());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from.rqid() != 0) {
    set_rqid(from.rqid());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void QueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {

  return true;
}

void QueryResponse::Swap(QueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResponse::InternalSwap(QueryResponse* other) {
  std::swap(rqid_, other->rqid_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResponse_descriptor_;
  metadata.reflection = QueryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryResponse

// optional int64 rqID = 1;
void QueryResponse::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryResponse::rqid() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.rqID)
  return rqid_;
}
 void QueryResponse::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.rqID)
}

// optional .Protobuf.MsgType msgType = 3;
void QueryResponse::clear_msgtype() {
  msgtype_ = 0;
}
 ::Protobuf::MsgType QueryResponse::msgtype() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.msgType)
  return static_cast< ::Protobuf::MsgType >(msgtype_);
}
 void QueryResponse::set_msgtype(::Protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.QueryResponse.msgType)
}

// optional .Protobuf.InitiateConnectionResponse initiateConnectionResponse = 5;
bool QueryResponse::has_initiateconnectionresponse() const {
  return msg_case() == kInitiateConnectionResponse;
}
void QueryResponse::set_has_initiateconnectionresponse() {
  _oneof_case_[0] = kInitiateConnectionResponse;
}
void QueryResponse::clear_initiateconnectionresponse() {
  if (has_initiateconnectionresponse()) {
    delete msg_.initiateconnectionresponse_;
    clear_has_msg();
  }
}
 const ::Protobuf::InitiateConnectionResponse& QueryResponse::initiateconnectionresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.initiateConnectionResponse)
  return has_initiateconnectionresponse()
      ? *msg_.initiateconnectionresponse_
      : ::Protobuf::InitiateConnectionResponse::default_instance();
}
::Protobuf::InitiateConnectionResponse* QueryResponse::mutable_initiateconnectionresponse() {
  if (!has_initiateconnectionresponse()) {
    clear_msg();
    set_has_initiateconnectionresponse();
    msg_.initiateconnectionresponse_ = new ::Protobuf::InitiateConnectionResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.initiateConnectionResponse)
  return msg_.initiateconnectionresponse_;
}
::Protobuf::InitiateConnectionResponse* QueryResponse::release_initiateconnectionresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.initiateConnectionResponse)
  if (has_initiateconnectionresponse()) {
    clear_has_msg();
    ::Protobuf::InitiateConnectionResponse* temp = msg_.initiateconnectionresponse_;
    msg_.initiateconnectionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryResponse::set_allocated_initiateconnectionresponse(::Protobuf::InitiateConnectionResponse* initiateconnectionresponse) {
  clear_msg();
  if (initiateconnectionresponse) {
    set_has_initiateconnectionresponse();
    msg_.initiateconnectionresponse_ = initiateconnectionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.initiateConnectionResponse)
}

// optional .Protobuf.StartQuerySessionResponse startQuerySessionResponse = 6;
bool QueryResponse::has_startquerysessionresponse() const {
  return msg_case() == kStartQuerySessionResponse;
}
void QueryResponse::set_has_startquerysessionresponse() {
  _oneof_case_[0] = kStartQuerySessionResponse;
}
void QueryResponse::clear_startquerysessionresponse() {
  if (has_startquerysessionresponse()) {
    delete msg_.startquerysessionresponse_;
    clear_has_msg();
  }
}
 const ::Protobuf::StartQuerySessionResponse& QueryResponse::startquerysessionresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.startQuerySessionResponse)
  return has_startquerysessionresponse()
      ? *msg_.startquerysessionresponse_
      : ::Protobuf::StartQuerySessionResponse::default_instance();
}
::Protobuf::StartQuerySessionResponse* QueryResponse::mutable_startquerysessionresponse() {
  if (!has_startquerysessionresponse()) {
    clear_msg();
    set_has_startquerysessionresponse();
    msg_.startquerysessionresponse_ = new ::Protobuf::StartQuerySessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.startQuerySessionResponse)
  return msg_.startquerysessionresponse_;
}
::Protobuf::StartQuerySessionResponse* QueryResponse::release_startquerysessionresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.startQuerySessionResponse)
  if (has_startquerysessionresponse()) {
    clear_has_msg();
    ::Protobuf::StartQuerySessionResponse* temp = msg_.startquerysessionresponse_;
    msg_.startquerysessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryResponse::set_allocated_startquerysessionresponse(::Protobuf::StartQuerySessionResponse* startquerysessionresponse) {
  clear_msg();
  if (startquerysessionresponse) {
    set_has_startquerysessionresponse();
    msg_.startquerysessionresponse_ = startquerysessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.startQuerySessionResponse)
}

// optional .Protobuf.ContinueQuerySessionResponse continueQuerySessionResponse = 7;
bool QueryResponse::has_continuequerysessionresponse() const {
  return msg_case() == kContinueQuerySessionResponse;
}
void QueryResponse::set_has_continuequerysessionresponse() {
  _oneof_case_[0] = kContinueQuerySessionResponse;
}
void QueryResponse::clear_continuequerysessionresponse() {
  if (has_continuequerysessionresponse()) {
    delete msg_.continuequerysessionresponse_;
    clear_has_msg();
  }
}
 const ::Protobuf::ContinueQuerySessionResponse& QueryResponse::continuequerysessionresponse() const {
  // @@protoc_insertion_point(field_get:Protobuf.QueryResponse.continueQuerySessionResponse)
  return has_continuequerysessionresponse()
      ? *msg_.continuequerysessionresponse_
      : ::Protobuf::ContinueQuerySessionResponse::default_instance();
}
::Protobuf::ContinueQuerySessionResponse* QueryResponse::mutable_continuequerysessionresponse() {
  if (!has_continuequerysessionresponse()) {
    clear_msg();
    set_has_continuequerysessionresponse();
    msg_.continuequerysessionresponse_ = new ::Protobuf::ContinueQuerySessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:Protobuf.QueryResponse.continueQuerySessionResponse)
  return msg_.continuequerysessionresponse_;
}
::Protobuf::ContinueQuerySessionResponse* QueryResponse::release_continuequerysessionresponse() {
  // @@protoc_insertion_point(field_release:Protobuf.QueryResponse.continueQuerySessionResponse)
  if (has_continuequerysessionresponse()) {
    clear_has_msg();
    ::Protobuf::ContinueQuerySessionResponse* temp = msg_.continuequerysessionresponse_;
    msg_.continuequerysessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void QueryResponse::set_allocated_continuequerysessionresponse(::Protobuf::ContinueQuerySessionResponse* continuequerysessionresponse) {
  clear_msg();
  if (continuequerysessionresponse) {
    set_has_continuequerysessionresponse();
    msg_.continuequerysessionresponse_ = continuequerysessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:Protobuf.QueryResponse.continueQuerySessionResponse)
}

bool QueryResponse::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void QueryResponse::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
QueryResponse::MsgCase QueryResponse::msg_case() const {
  return QueryResponse::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitiateConnection::kNodeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitiateConnection::InitiateConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.InitiateConnection)
}

void InitiateConnection::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InitiateConnection::InitiateConnection(const InitiateConnection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.InitiateConnection)
}

void InitiateConnection::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitiateConnection::~InitiateConnection() {
  // @@protoc_insertion_point(destructor:Protobuf.InitiateConnection)
  SharedDtor();
}

void InitiateConnection::SharedDtor() {
  nodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitiateConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitiateConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitiateConnection_descriptor_;
}

const InitiateConnection& InitiateConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

InitiateConnection* InitiateConnection::default_instance_ = NULL;

InitiateConnection* InitiateConnection::New(::google::protobuf::Arena* arena) const {
  InitiateConnection* n = new InitiateConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitiateConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.InitiateConnection)
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitiateConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.InitiateConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nodeName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.InitiateConnection.nodeName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.InitiateConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.InitiateConnection)
  return false;
#undef DO_
}

void InitiateConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.InitiateConnection)
  // optional string nodeName = 1;
  if (this->nodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.InitiateConnection.nodeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nodename(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.InitiateConnection)
}

::google::protobuf::uint8* InitiateConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.InitiateConnection)
  // optional string nodeName = 1;
  if (this->nodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.InitiateConnection.nodeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.InitiateConnection)
  return target;
}

int InitiateConnection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.InitiateConnection)
  int total_size = 0;

  // optional string nodeName = 1;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitiateConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.InitiateConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitiateConnection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitiateConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.InitiateConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.InitiateConnection)
    MergeFrom(*source);
  }
}

void InitiateConnection::MergeFrom(const InitiateConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.InitiateConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.nodename().size() > 0) {

    nodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
}

void InitiateConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.InitiateConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitiateConnection::CopyFrom(const InitiateConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.InitiateConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiateConnection::IsInitialized() const {

  return true;
}

void InitiateConnection::Swap(InitiateConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitiateConnection::InternalSwap(InitiateConnection* other) {
  nodename_.Swap(&other->nodename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitiateConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitiateConnection_descriptor_;
  metadata.reflection = InitiateConnection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitiateConnection

// optional string nodeName = 1;
void InitiateConnection::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InitiateConnection::nodename() const {
  // @@protoc_insertion_point(field_get:Protobuf.InitiateConnection.nodeName)
  return nodename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitiateConnection::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.InitiateConnection.nodeName)
}
 void InitiateConnection::set_nodename(const char* value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.InitiateConnection.nodeName)
}
 void InitiateConnection::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.InitiateConnection.nodeName)
}
 ::std::string* InitiateConnection::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.InitiateConnection.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitiateConnection::release_nodename() {
  // @@protoc_insertion_point(field_release:Protobuf.InitiateConnection.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitiateConnection::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.InitiateConnection.nodeName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitiateConnectionResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitiateConnectionResponse::InitiateConnectionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.InitiateConnectionResponse)
}

void InitiateConnectionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InitiateConnectionResponse::InitiateConnectionResponse(const InitiateConnectionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.InitiateConnectionResponse)
}

void InitiateConnectionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitiateConnectionResponse::~InitiateConnectionResponse() {
  // @@protoc_insertion_point(destructor:Protobuf.InitiateConnectionResponse)
  SharedDtor();
}

void InitiateConnectionResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitiateConnectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitiateConnectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitiateConnectionResponse_descriptor_;
}

const InitiateConnectionResponse& InitiateConnectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

InitiateConnectionResponse* InitiateConnectionResponse::default_instance_ = NULL;

InitiateConnectionResponse* InitiateConnectionResponse::New(::google::protobuf::Arena* arena) const {
  InitiateConnectionResponse* n = new InitiateConnectionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitiateConnectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.InitiateConnectionResponse)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitiateConnectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.InitiateConnectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.InitiateConnectionResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.InitiateConnectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.InitiateConnectionResponse)
  return false;
#undef DO_
}

void InitiateConnectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.InitiateConnectionResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.InitiateConnectionResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.InitiateConnectionResponse)
}

::google::protobuf::uint8* InitiateConnectionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.InitiateConnectionResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.InitiateConnectionResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.InitiateConnectionResponse)
  return target;
}

int InitiateConnectionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.InitiateConnectionResponse)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitiateConnectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.InitiateConnectionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitiateConnectionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitiateConnectionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.InitiateConnectionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.InitiateConnectionResponse)
    MergeFrom(*source);
  }
}

void InitiateConnectionResponse::MergeFrom(const InitiateConnectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.InitiateConnectionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void InitiateConnectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.InitiateConnectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitiateConnectionResponse::CopyFrom(const InitiateConnectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.InitiateConnectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiateConnectionResponse::IsInitialized() const {

  return true;
}

void InitiateConnectionResponse::Swap(InitiateConnectionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitiateConnectionResponse::InternalSwap(InitiateConnectionResponse* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitiateConnectionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitiateConnectionResponse_descriptor_;
  metadata.reflection = InitiateConnectionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitiateConnectionResponse

// optional string message = 1;
void InitiateConnectionResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InitiateConnectionResponse::message() const {
  // @@protoc_insertion_point(field_get:Protobuf.InitiateConnectionResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitiateConnectionResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.InitiateConnectionResponse.message)
}
 void InitiateConnectionResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.InitiateConnectionResponse.message)
}
 void InitiateConnectionResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.InitiateConnectionResponse.message)
}
 ::std::string* InitiateConnectionResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.InitiateConnectionResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitiateConnectionResponse::release_message() {
  // @@protoc_insertion_point(field_release:Protobuf.InitiateConnectionResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitiateConnectionResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.InitiateConnectionResponse.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartQuerySession::kSessionIDFieldNumber;
const int StartQuerySession::kQueryIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartQuerySession::StartQuerySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.StartQuerySession)
}

void StartQuerySession::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartQuerySession::StartQuerySession(const StartQuerySession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.StartQuerySession)
}

void StartQuerySession::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  queryid_ = 0;
}

StartQuerySession::~StartQuerySession() {
  // @@protoc_insertion_point(destructor:Protobuf.StartQuerySession)
  SharedDtor();
}

void StartQuerySession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartQuerySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartQuerySession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartQuerySession_descriptor_;
}

const StartQuerySession& StartQuerySession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

StartQuerySession* StartQuerySession::default_instance_ = NULL;

StartQuerySession* StartQuerySession::New(::google::protobuf::Arena* arena) const {
  StartQuerySession* n = new StartQuerySession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartQuerySession::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.StartQuerySession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartQuerySession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartQuerySession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sessionid_, queryid_);

#undef ZR_HELPER_
#undef ZR_

}

bool StartQuerySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.StartQuerySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sessionID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_queryID;
        break;
      }

      // optional int32 queryID = 2;
      case 2: {
        if (tag == 16) {
         parse_queryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queryid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.StartQuerySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.StartQuerySession)
  return false;
#undef DO_
}

void StartQuerySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.StartQuerySession)
  // optional int64 sessionID = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }

  // optional int32 queryID = 2;
  if (this->queryid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queryid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.StartQuerySession)
}

::google::protobuf::uint8* StartQuerySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.StartQuerySession)
  // optional int64 sessionID = 1;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }

  // optional int32 queryID = 2;
  if (this->queryid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queryid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.StartQuerySession)
  return target;
}

int StartQuerySession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.StartQuerySession)
  int total_size = 0;

  // optional int64 sessionID = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  // optional int32 queryID = 2;
  if (this->queryid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queryid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartQuerySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.StartQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartQuerySession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartQuerySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.StartQuerySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.StartQuerySession)
    MergeFrom(*source);
  }
}

void StartQuerySession::MergeFrom(const StartQuerySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.StartQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.queryid() != 0) {
    set_queryid(from.queryid());
  }
}

void StartQuerySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.StartQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartQuerySession::CopyFrom(const StartQuerySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.StartQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartQuerySession::IsInitialized() const {

  return true;
}

void StartQuerySession::Swap(StartQuerySession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartQuerySession::InternalSwap(StartQuerySession* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(queryid_, other->queryid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartQuerySession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartQuerySession_descriptor_;
  metadata.reflection = StartQuerySession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartQuerySession

// optional int64 sessionID = 1;
void StartQuerySession::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 StartQuerySession::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySession.sessionID)
  return sessionid_;
}
 void StartQuerySession::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySession.sessionID)
}

// optional int32 queryID = 2;
void StartQuerySession::clear_queryid() {
  queryid_ = 0;
}
 ::google::protobuf::int32 StartQuerySession::queryid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySession.queryID)
  return queryid_;
}
 void StartQuerySession::set_queryid(::google::protobuf::int32 value) {
  
  queryid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySession.queryID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartQuerySessionResponse::kMessageFieldNumber;
const int StartQuerySessionResponse::kSessionIDFieldNumber;
const int StartQuerySessionResponse::kQueryIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartQuerySessionResponse::StartQuerySessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.StartQuerySessionResponse)
}

void StartQuerySessionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartQuerySessionResponse::StartQuerySessionResponse(const StartQuerySessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.StartQuerySessionResponse)
}

void StartQuerySessionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = GOOGLE_LONGLONG(0);
  queryid_ = 0;
}

StartQuerySessionResponse::~StartQuerySessionResponse() {
  // @@protoc_insertion_point(destructor:Protobuf.StartQuerySessionResponse)
  SharedDtor();
}

void StartQuerySessionResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StartQuerySessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartQuerySessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartQuerySessionResponse_descriptor_;
}

const StartQuerySessionResponse& StartQuerySessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

StartQuerySessionResponse* StartQuerySessionResponse::default_instance_ = NULL;

StartQuerySessionResponse* StartQuerySessionResponse::New(::google::protobuf::Arena* arena) const {
  StartQuerySessionResponse* n = new StartQuerySessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartQuerySessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.StartQuerySessionResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartQuerySessionResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartQuerySessionResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sessionid_, queryid_);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StartQuerySessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.StartQuerySessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.StartQuerySessionResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionID;
        break;
      }

      // optional int64 sessionID = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_queryID;
        break;
      }

      // optional int32 queryID = 3;
      case 3: {
        if (tag == 24) {
         parse_queryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queryid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.StartQuerySessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.StartQuerySessionResponse)
  return false;
#undef DO_
}

void StartQuerySessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.StartQuerySessionResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.StartQuerySessionResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sessionid(), output);
  }

  // optional int32 queryID = 3;
  if (this->queryid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queryid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.StartQuerySessionResponse)
}

::google::protobuf::uint8* StartQuerySessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.StartQuerySessionResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.StartQuerySessionResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sessionid(), target);
  }

  // optional int32 queryID = 3;
  if (this->queryid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queryid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.StartQuerySessionResponse)
  return target;
}

int StartQuerySessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.StartQuerySessionResponse)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  // optional int32 queryID = 3;
  if (this->queryid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queryid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartQuerySessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.StartQuerySessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartQuerySessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartQuerySessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.StartQuerySessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.StartQuerySessionResponse)
    MergeFrom(*source);
  }
}

void StartQuerySessionResponse::MergeFrom(const StartQuerySessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.StartQuerySessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.queryid() != 0) {
    set_queryid(from.queryid());
  }
}

void StartQuerySessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.StartQuerySessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartQuerySessionResponse::CopyFrom(const StartQuerySessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.StartQuerySessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartQuerySessionResponse::IsInitialized() const {

  return true;
}

void StartQuerySessionResponse::Swap(StartQuerySessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartQuerySessionResponse::InternalSwap(StartQuerySessionResponse* other) {
  message_.Swap(&other->message_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(queryid_, other->queryid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartQuerySessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartQuerySessionResponse_descriptor_;
  metadata.reflection = StartQuerySessionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartQuerySessionResponse

// optional string message = 1;
void StartQuerySessionResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StartQuerySessionResponse::message() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySessionResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartQuerySessionResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySessionResponse.message)
}
 void StartQuerySessionResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.StartQuerySessionResponse.message)
}
 void StartQuerySessionResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.StartQuerySessionResponse.message)
}
 ::std::string* StartQuerySessionResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.StartQuerySessionResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StartQuerySessionResponse::release_message() {
  // @@protoc_insertion_point(field_release:Protobuf.StartQuerySessionResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartQuerySessionResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.StartQuerySessionResponse.message)
}

// optional int64 sessionID = 2;
void StartQuerySessionResponse::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 StartQuerySessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySessionResponse.sessionID)
  return sessionid_;
}
 void StartQuerySessionResponse::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySessionResponse.sessionID)
}

// optional int32 queryID = 3;
void StartQuerySessionResponse::clear_queryid() {
  queryid_ = 0;
}
 ::google::protobuf::int32 StartQuerySessionResponse::queryid() const {
  // @@protoc_insertion_point(field_get:Protobuf.StartQuerySessionResponse.queryID)
  return queryid_;
}
 void StartQuerySessionResponse::set_queryid(::google::protobuf::int32 value) {
  
  queryid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.StartQuerySessionResponse.queryID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContinueQuerySession::kNodeNameFieldNumber;
const int ContinueQuerySession::kSessionIDFieldNumber;
const int ContinueQuerySession::kTaskIDFieldNumber;
const int ContinueQuerySession::kBodyIndexFieldNumber;
const int ContinueQuerySession::kOperationIndexFieldNumber;
const int ContinueQuerySession::kFrameAsStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContinueQuerySession::ContinueQuerySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.ContinueQuerySession)
}

void ContinueQuerySession::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ContinueQuerySession::ContinueQuerySession(const ContinueQuerySession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.ContinueQuerySession)
}

void ContinueQuerySession::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = GOOGLE_LONGLONG(0);
  bodyindex_ = 0;
  operationindex_ = 0;
  frameasstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContinueQuerySession::~ContinueQuerySession() {
  // @@protoc_insertion_point(destructor:Protobuf.ContinueQuerySession)
  SharedDtor();
}

void ContinueQuerySession::SharedDtor() {
  nodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frameasstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContinueQuerySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContinueQuerySession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContinueQuerySession_descriptor_;
}

const ContinueQuerySession& ContinueQuerySession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

ContinueQuerySession* ContinueQuerySession::default_instance_ = NULL;

ContinueQuerySession* ContinueQuerySession::New(::google::protobuf::Arena* arena) const {
  ContinueQuerySession* n = new ContinueQuerySession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContinueQuerySession::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.ContinueQuerySession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContinueQuerySession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContinueQuerySession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bodyindex_, operationindex_);
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = GOOGLE_LONGLONG(0);
  frameasstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  taskid_.Clear();
}

bool ContinueQuerySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.ContinueQuerySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nodeName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.ContinueQuerySession.nodeName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionID;
        break;
      }

      // optional int64 sessionID = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_taskID;
        break;
      }

      // repeated int32 taskID = 3;
      case 3: {
        if (tag == 26) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_taskid())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_taskid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bodyIndex;
        break;
      }

      // optional int32 bodyIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_bodyIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bodyindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_operationIndex;
        break;
      }

      // optional int32 operationIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_operationIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operationindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frameAsString;
        break;
      }

      // optional string frameAsString = 6;
      case 6: {
        if (tag == 50) {
         parse_frameAsString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frameasstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frameasstring().data(), this->frameasstring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.ContinueQuerySession.frameAsString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.ContinueQuerySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.ContinueQuerySession)
  return false;
#undef DO_
}

void ContinueQuerySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.ContinueQuerySession)
  // optional string nodeName = 1;
  if (this->nodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySession.nodeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nodename(), output);
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sessionid(), output);
  }

  // repeated int32 taskID = 3;
  if (this->taskid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_taskid_cached_byte_size_);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->taskid(i), output);
  }

  // optional int32 bodyIndex = 4;
  if (this->bodyindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bodyindex(), output);
  }

  // optional int32 operationIndex = 5;
  if (this->operationindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->operationindex(), output);
  }

  // optional string frameAsString = 6;
  if (this->frameasstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frameasstring().data(), this->frameasstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySession.frameAsString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->frameasstring(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.ContinueQuerySession)
}

::google::protobuf::uint8* ContinueQuerySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.ContinueQuerySession)
  // optional string nodeName = 1;
  if (this->nodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySession.nodeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodename(), target);
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sessionid(), target);
  }

  // repeated int32 taskID = 3;
  if (this->taskid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _taskid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->taskid(i), target);
  }

  // optional int32 bodyIndex = 4;
  if (this->bodyindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bodyindex(), target);
  }

  // optional int32 operationIndex = 5;
  if (this->operationindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->operationindex(), target);
  }

  // optional string frameAsString = 6;
  if (this->frameasstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frameasstring().data(), this->frameasstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySession.frameAsString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->frameasstring(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.ContinueQuerySession)
  return target;
}

int ContinueQuerySession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.ContinueQuerySession)
  int total_size = 0;

  // optional string nodeName = 1;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodename());
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  // optional int32 bodyIndex = 4;
  if (this->bodyindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bodyindex());
  }

  // optional int32 operationIndex = 5;
  if (this->operationindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operationindex());
  }

  // optional string frameAsString = 6;
  if (this->frameasstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frameasstring());
  }

  // repeated int32 taskID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->taskid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _taskid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContinueQuerySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.ContinueQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContinueQuerySession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContinueQuerySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.ContinueQuerySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.ContinueQuerySession)
    MergeFrom(*source);
  }
}

void ContinueQuerySession::MergeFrom(const ContinueQuerySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.ContinueQuerySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  taskid_.MergeFrom(from.taskid_);
  if (from.nodename().size() > 0) {

    nodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.bodyindex() != 0) {
    set_bodyindex(from.bodyindex());
  }
  if (from.operationindex() != 0) {
    set_operationindex(from.operationindex());
  }
  if (from.frameasstring().size() > 0) {

    frameasstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frameasstring_);
  }
}

void ContinueQuerySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.ContinueQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueQuerySession::CopyFrom(const ContinueQuerySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.ContinueQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueQuerySession::IsInitialized() const {

  return true;
}

void ContinueQuerySession::Swap(ContinueQuerySession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContinueQuerySession::InternalSwap(ContinueQuerySession* other) {
  nodename_.Swap(&other->nodename_);
  std::swap(sessionid_, other->sessionid_);
  taskid_.UnsafeArenaSwap(&other->taskid_);
  std::swap(bodyindex_, other->bodyindex_);
  std::swap(operationindex_, other->operationindex_);
  frameasstring_.Swap(&other->frameasstring_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContinueQuerySession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContinueQuerySession_descriptor_;
  metadata.reflection = ContinueQuerySession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContinueQuerySession

// optional string nodeName = 1;
void ContinueQuerySession::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContinueQuerySession::nodename() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.nodeName)
  return nodename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySession::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.nodeName)
}
 void ContinueQuerySession::set_nodename(const char* value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySession.nodeName)
}
 void ContinueQuerySession::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySession.nodeName)
}
 ::std::string* ContinueQuerySession::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySession.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContinueQuerySession::release_nodename() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySession.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySession::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySession.nodeName)
}

// optional int64 sessionID = 2;
void ContinueQuerySession::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ContinueQuerySession::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.sessionID)
  return sessionid_;
}
 void ContinueQuerySession::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.sessionID)
}

// repeated int32 taskID = 3;
int ContinueQuerySession::taskid_size() const {
  return taskid_.size();
}
void ContinueQuerySession::clear_taskid() {
  taskid_.Clear();
}
 ::google::protobuf::int32 ContinueQuerySession::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.taskID)
  return taskid_.Get(index);
}
 void ContinueQuerySession::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.taskID)
}
 void ContinueQuerySession::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.ContinueQuerySession.taskID)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ContinueQuerySession::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.ContinueQuerySession.taskID)
  return taskid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ContinueQuerySession::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.ContinueQuerySession.taskID)
  return &taskid_;
}

// optional int32 bodyIndex = 4;
void ContinueQuerySession::clear_bodyindex() {
  bodyindex_ = 0;
}
 ::google::protobuf::int32 ContinueQuerySession::bodyindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.bodyIndex)
  return bodyindex_;
}
 void ContinueQuerySession::set_bodyindex(::google::protobuf::int32 value) {
  
  bodyindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.bodyIndex)
}

// optional int32 operationIndex = 5;
void ContinueQuerySession::clear_operationindex() {
  operationindex_ = 0;
}
 ::google::protobuf::int32 ContinueQuerySession::operationindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.operationIndex)
  return operationindex_;
}
 void ContinueQuerySession::set_operationindex(::google::protobuf::int32 value) {
  
  operationindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.operationIndex)
}

// optional string frameAsString = 6;
void ContinueQuerySession::clear_frameasstring() {
  frameasstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContinueQuerySession::frameasstring() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySession::set_frameasstring(const ::std::string& value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySession.frameAsString)
}
 void ContinueQuerySession::set_frameasstring(const char* value) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySession.frameAsString)
}
 void ContinueQuerySession::set_frameasstring(const char* value, size_t size) {
  
  frameasstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySession.frameAsString)
}
 ::std::string* ContinueQuerySession::mutable_frameasstring() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySession.frameAsString)
  return frameasstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContinueQuerySession::release_frameasstring() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySession.frameAsString)
  
  return frameasstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySession::set_allocated_frameasstring(::std::string* frameasstring) {
  if (frameasstring != NULL) {
    
  } else {
    
  }
  frameasstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frameasstring);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySession.frameAsString)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContinueQuerySessionResponse::kStatusFieldNumber;
const int ContinueQuerySessionResponse::kSessionIDFieldNumber;
const int ContinueQuerySessionResponse::kTaskIDFieldNumber;
const int ContinueQuerySessionResponse::kResultMatchSetFieldNumber;
const int ContinueQuerySessionResponse::kPartIndexFieldNumber;
const int ContinueQuerySessionResponse::kIsFinalPartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContinueQuerySessionResponse::ContinueQuerySessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuf.ContinueQuerySessionResponse)
}

void ContinueQuerySessionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ContinueQuerySessionResponse::ContinueQuerySessionResponse(const ContinueQuerySessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuf.ContinueQuerySessionResponse)
}

void ContinueQuerySessionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = GOOGLE_LONGLONG(0);
  resultmatchset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partindex_ = 0;
  isfinalpart_ = false;
}

ContinueQuerySessionResponse::~ContinueQuerySessionResponse() {
  // @@protoc_insertion_point(destructor:Protobuf.ContinueQuerySessionResponse)
  SharedDtor();
}

void ContinueQuerySessionResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resultmatchset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContinueQuerySessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContinueQuerySessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContinueQuerySessionResponse_descriptor_;
}

const ContinueQuerySessionResponse& ContinueQuerySessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

ContinueQuerySessionResponse* ContinueQuerySessionResponse::default_instance_ = NULL;

ContinueQuerySessionResponse* ContinueQuerySessionResponse::New(::google::protobuf::Arena* arena) const {
  ContinueQuerySessionResponse* n = new ContinueQuerySessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContinueQuerySessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Protobuf.ContinueQuerySessionResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContinueQuerySessionResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContinueQuerySessionResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(partindex_, isfinalpart_);
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = GOOGLE_LONGLONG(0);
  resultmatchset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  taskid_.Clear();
}

bool ContinueQuerySessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuf.ContinueQuerySessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.ContinueQuerySessionResponse.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionID;
        break;
      }

      // optional int64 sessionID = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_taskID;
        break;
      }

      // repeated int32 taskID = 3;
      case 3: {
        if (tag == 26) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_taskid())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_taskid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resultMatchSet;
        break;
      }

      // optional string resultMatchSet = 4;
      case 4: {
        if (tag == 34) {
         parse_resultMatchSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultmatchset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resultmatchset().data(), this->resultmatchset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Protobuf.ContinueQuerySessionResponse.resultMatchSet"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_partIndex;
        break;
      }

      // optional int32 partIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_partIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isFinalPart;
        break;
      }

      // optional bool isFinalPart = 6;
      case 6: {
        if (tag == 48) {
         parse_isFinalPart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinalpart_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuf.ContinueQuerySessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuf.ContinueQuerySessionResponse)
  return false;
#undef DO_
}

void ContinueQuerySessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuf.ContinueQuerySessionResponse)
  // optional string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySessionResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sessionid(), output);
  }

  // repeated int32 taskID = 3;
  if (this->taskid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_taskid_cached_byte_size_);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->taskid(i), output);
  }

  // optional string resultMatchSet = 4;
  if (this->resultmatchset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmatchset().data(), this->resultmatchset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySessionResponse.resultMatchSet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->resultmatchset(), output);
  }

  // optional int32 partIndex = 5;
  if (this->partindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->partindex(), output);
  }

  // optional bool isFinalPart = 6;
  if (this->isfinalpart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isfinalpart(), output);
  }

  // @@protoc_insertion_point(serialize_end:Protobuf.ContinueQuerySessionResponse)
}

::google::protobuf::uint8* ContinueQuerySessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuf.ContinueQuerySessionResponse)
  // optional string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySessionResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sessionid(), target);
  }

  // repeated int32 taskID = 3;
  if (this->taskid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _taskid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->taskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->taskid(i), target);
  }

  // optional string resultMatchSet = 4;
  if (this->resultmatchset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resultmatchset().data(), this->resultmatchset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Protobuf.ContinueQuerySessionResponse.resultMatchSet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resultmatchset(), target);
  }

  // optional int32 partIndex = 5;
  if (this->partindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->partindex(), target);
  }

  // optional bool isFinalPart = 6;
  if (this->isfinalpart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isfinalpart(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Protobuf.ContinueQuerySessionResponse)
  return target;
}

int ContinueQuerySessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protobuf.ContinueQuerySessionResponse)
  int total_size = 0;

  // optional string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // optional int64 sessionID = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sessionid());
  }

  // optional string resultMatchSet = 4;
  if (this->resultmatchset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resultmatchset());
  }

  // optional int32 partIndex = 5;
  if (this->partindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partindex());
  }

  // optional bool isFinalPart = 6;
  if (this->isfinalpart() != 0) {
    total_size += 1 + 1;
  }

  // repeated int32 taskID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->taskid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _taskid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContinueQuerySessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protobuf.ContinueQuerySessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContinueQuerySessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContinueQuerySessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protobuf.ContinueQuerySessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protobuf.ContinueQuerySessionResponse)
    MergeFrom(*source);
  }
}

void ContinueQuerySessionResponse::MergeFrom(const ContinueQuerySessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protobuf.ContinueQuerySessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  taskid_.MergeFrom(from.taskid_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.resultmatchset().size() > 0) {

    resultmatchset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resultmatchset_);
  }
  if (from.partindex() != 0) {
    set_partindex(from.partindex());
  }
  if (from.isfinalpart() != 0) {
    set_isfinalpart(from.isfinalpart());
  }
}

void ContinueQuerySessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protobuf.ContinueQuerySessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueQuerySessionResponse::CopyFrom(const ContinueQuerySessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protobuf.ContinueQuerySessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueQuerySessionResponse::IsInitialized() const {

  return true;
}

void ContinueQuerySessionResponse::Swap(ContinueQuerySessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContinueQuerySessionResponse::InternalSwap(ContinueQuerySessionResponse* other) {
  status_.Swap(&other->status_);
  std::swap(sessionid_, other->sessionid_);
  taskid_.UnsafeArenaSwap(&other->taskid_);
  resultmatchset_.Swap(&other->resultmatchset_);
  std::swap(partindex_, other->partindex_);
  std::swap(isfinalpart_, other->isfinalpart_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContinueQuerySessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContinueQuerySessionResponse_descriptor_;
  metadata.reflection = ContinueQuerySessionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContinueQuerySessionResponse

// optional string status = 1;
void ContinueQuerySessionResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContinueQuerySessionResponse::status() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySessionResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.status)
}
 void ContinueQuerySessionResponse::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySessionResponse.status)
}
 void ContinueQuerySessionResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySessionResponse.status)
}
 ::std::string* ContinueQuerySessionResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySessionResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContinueQuerySessionResponse::release_status() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySessionResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySessionResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySessionResponse.status)
}

// optional int64 sessionID = 2;
void ContinueQuerySessionResponse::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ContinueQuerySessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.sessionID)
  return sessionid_;
}
 void ContinueQuerySessionResponse::set_sessionid(::google::protobuf::int64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.sessionID)
}

// repeated int32 taskID = 3;
int ContinueQuerySessionResponse::taskid_size() const {
  return taskid_.size();
}
void ContinueQuerySessionResponse::clear_taskid() {
  taskid_.Clear();
}
 ::google::protobuf::int32 ContinueQuerySessionResponse::taskid(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.taskID)
  return taskid_.Get(index);
}
 void ContinueQuerySessionResponse::set_taskid(int index, ::google::protobuf::int32 value) {
  taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.taskID)
}
 void ContinueQuerySessionResponse::add_taskid(::google::protobuf::int32 value) {
  taskid_.Add(value);
  // @@protoc_insertion_point(field_add:Protobuf.ContinueQuerySessionResponse.taskID)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ContinueQuerySessionResponse::taskid() const {
  // @@protoc_insertion_point(field_list:Protobuf.ContinueQuerySessionResponse.taskID)
  return taskid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ContinueQuerySessionResponse::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.ContinueQuerySessionResponse.taskID)
  return &taskid_;
}

// optional string resultMatchSet = 4;
void ContinueQuerySessionResponse::clear_resultmatchset() {
  resultmatchset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContinueQuerySessionResponse::resultmatchset() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
  return resultmatchset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySessionResponse::set_resultmatchset(const ::std::string& value) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}
 void ContinueQuerySessionResponse::set_resultmatchset(const char* value) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}
 void ContinueQuerySessionResponse::set_resultmatchset(const char* value, size_t size) {
  
  resultmatchset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}
 ::std::string* ContinueQuerySessionResponse::mutable_resultmatchset() {
  
  // @@protoc_insertion_point(field_mutable:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
  return resultmatchset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContinueQuerySessionResponse::release_resultmatchset() {
  // @@protoc_insertion_point(field_release:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
  
  return resultmatchset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContinueQuerySessionResponse::set_allocated_resultmatchset(::std::string* resultmatchset) {
  if (resultmatchset != NULL) {
    
  } else {
    
  }
  resultmatchset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultmatchset);
  // @@protoc_insertion_point(field_set_allocated:Protobuf.ContinueQuerySessionResponse.resultMatchSet)
}

// optional int32 partIndex = 5;
void ContinueQuerySessionResponse::clear_partindex() {
  partindex_ = 0;
}
 ::google::protobuf::int32 ContinueQuerySessionResponse::partindex() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.partIndex)
  return partindex_;
}
 void ContinueQuerySessionResponse::set_partindex(::google::protobuf::int32 value) {
  
  partindex_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.partIndex)
}

// optional bool isFinalPart = 6;
void ContinueQuerySessionResponse::clear_isfinalpart() {
  isfinalpart_ = false;
}
 bool ContinueQuerySessionResponse::isfinalpart() const {
  // @@protoc_insertion_point(field_get:Protobuf.ContinueQuerySessionResponse.isFinalPart)
  return isfinalpart_;
}
 void ContinueQuerySessionResponse::set_isfinalpart(bool value) {
  
  isfinalpart_ = value;
  // @@protoc_insertion_point(field_set:Protobuf.ContinueQuerySessionResponse.isFinalPart)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

// @@protoc_insertion_point(global_scope)
