// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* QueryServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryServerRequest_reflection_ = NULL;
struct QueryServerRequestOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr a_;
  ::google::protobuf::int32 x_;
}* QueryServerRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* QueryServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryServerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryServerMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageProtocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MessageProtocol_2eproto() {
  protobuf_AddDesc_MessageProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  QueryServerRequest_descriptor_ = file->message_type(0);
  static const int QueryServerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerRequest, rqid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryServerRequest_default_oneof_instance_, a_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(QueryServerRequest_default_oneof_instance_, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerRequest, msg_),
  };
  QueryServerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryServerRequest_descriptor_,
      QueryServerRequest::default_instance_,
      QueryServerRequest_offsets_,
      -1,
      -1,
      -1,
      QueryServerRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerRequest, _oneof_case_[0]),
      sizeof(QueryServerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerRequest, _is_default_instance_));
  QueryServerResponse_descriptor_ = file->message_type(1);
  static const int QueryServerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerResponse, rqid_),
  };
  QueryServerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryServerResponse_descriptor_,
      QueryServerResponse::default_instance_,
      QueryServerResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryServerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServerResponse, _is_default_instance_));
  QueryServerMsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryServerRequest_descriptor_, &QueryServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryServerResponse_descriptor_, &QueryServerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageProtocol_2eproto() {
  delete QueryServerRequest::default_instance_;
  delete QueryServerRequest_default_oneof_instance_;
  delete QueryServerRequest_reflection_;
  delete QueryServerResponse::default_instance_;
  delete QueryServerResponse_reflection_;
}

void protobuf_AddDesc_MessageProtocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MessageProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MessageProtocol.proto\"C\n\022QueryServerRe"
    "quest\022\014\n\004rqID\030\001 \001(\003\022\013\n\001a\030\002 \001(\tH\000\022\013\n\001x\030\003 "
    "\001(\005H\000B\005\n\003msg\"#\n\023QueryServerResponse\022\014\n\004r"
    "qID\030\001 \001(\003*N\n\022QueryServerMsgType\022\017\n\013START"
    "_QUERY\020\000\022\023\n\017TERMINATE_QUERY\020\001\022\022\n\016CONTINU"
    "E_QUERY\020\002b\006proto3", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageProtocol.proto", &protobuf_RegisterTypes);
  QueryServerRequest::default_instance_ = new QueryServerRequest();
  QueryServerRequest_default_oneof_instance_ = new QueryServerRequestOneofInstance();
  QueryServerResponse::default_instance_ = new QueryServerResponse();
  QueryServerRequest::default_instance_->InitAsDefaultInstance();
  QueryServerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageProtocol_2eproto {
  StaticDescriptorInitializer_MessageProtocol_2eproto() {
    protobuf_AddDesc_MessageProtocol_2eproto();
  }
} static_descriptor_initializer_MessageProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* QueryServerMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryServerMsgType_descriptor_;
}
bool QueryServerMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryServerRequest::kRqIDFieldNumber;
const int QueryServerRequest::kAFieldNumber;
const int QueryServerRequest::kXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryServerRequest::QueryServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryServerRequest)
}

void QueryServerRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  QueryServerRequest_default_oneof_instance_->a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  QueryServerRequest_default_oneof_instance_->x_ = 0;
}

QueryServerRequest::QueryServerRequest(const QueryServerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryServerRequest)
}

void QueryServerRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rqid_ = GOOGLE_LONGLONG(0);
  clear_has_msg();
}

QueryServerRequest::~QueryServerRequest() {
  // @@protoc_insertion_point(destructor:QueryServerRequest)
  SharedDtor();
}

void QueryServerRequest::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void QueryServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryServerRequest_descriptor_;
}

const QueryServerRequest& QueryServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

QueryServerRequest* QueryServerRequest::default_instance_ = NULL;

QueryServerRequest* QueryServerRequest::New(::google::protobuf::Arena* arena) const {
  QueryServerRequest* n = new QueryServerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryServerRequest::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:QueryServerRequest)
  switch(msg_case()) {
    case kA: {
      msg_.a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kX: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void QueryServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryServerRequest)
  rqid_ = GOOGLE_LONGLONG(0);
  clear_msg();
}

bool QueryServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rqID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_a;
        break;
      }

      // optional string a = 2;
      case 2: {
        if (tag == 18) {
         parse_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->a().data(), this->a().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "QueryServerRequest.a"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_.x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryServerRequest)
  return false;
#undef DO_
}

void QueryServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryServerRequest)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rqid(), output);
  }

  // optional string a = 2;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->a().data(), this->a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QueryServerRequest.a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->a(), output);
  }

  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // @@protoc_insertion_point(serialize_end:QueryServerRequest)
}

::google::protobuf::uint8* QueryServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryServerRequest)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rqid(), target);
  }

  // optional string a = 2;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->a().data(), this->a().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QueryServerRequest.a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->a(), target);
  }

  // optional int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QueryServerRequest)
  return target;
}

int QueryServerRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QueryServerRequest)
  int total_size = 0;

  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rqid());
  }

  switch (msg_case()) {
    // optional string a = 2;
    case kA: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->a());
      break;
    }
    // optional int32 x = 3;
    case kX: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryServerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryServerRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryServerRequest)
    MergeFrom(*source);
  }
}

void QueryServerRequest::MergeFrom(const QueryServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryServerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kA: {
      set_a(from.a());
      break;
    }
    case kX: {
      set_x(from.x());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from.rqid() != 0) {
    set_rqid(from.rqid());
  }
}

void QueryServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryServerRequest::CopyFrom(const QueryServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryServerRequest::IsInitialized() const {

  return true;
}

void QueryServerRequest::Swap(QueryServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryServerRequest::InternalSwap(QueryServerRequest* other) {
  std::swap(rqid_, other->rqid_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryServerRequest_descriptor_;
  metadata.reflection = QueryServerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryServerRequest

// optional int64 rqID = 1;
void QueryServerRequest::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryServerRequest::rqid() const {
  // @@protoc_insertion_point(field_get:QueryServerRequest.rqID)
  return rqid_;
}
 void QueryServerRequest::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:QueryServerRequest.rqID)
}

// optional string a = 2;
bool QueryServerRequest::has_a() const {
  return msg_case() == kA;
}
void QueryServerRequest::set_has_a() {
  _oneof_case_[0] = kA;
}
void QueryServerRequest::clear_a() {
  if (has_a()) {
    msg_.a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_msg();
  }
}
 const ::std::string& QueryServerRequest::a() const {
  // @@protoc_insertion_point(field_get:QueryServerRequest.a)
  if (has_a()) {
    return msg_.a_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void QueryServerRequest::set_a(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryServerRequest.a)
  if (!has_a()) {
    clear_msg();
    set_has_a();
    msg_.a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  msg_.a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QueryServerRequest.a)
}
 void QueryServerRequest::set_a(const char* value) {
  if (!has_a()) {
    clear_msg();
    set_has_a();
    msg_.a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  msg_.a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueryServerRequest.a)
}
 void QueryServerRequest::set_a(const char* value, size_t size) {
  if (!has_a()) {
    clear_msg();
    set_has_a();
    msg_.a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  msg_.a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueryServerRequest.a)
}
 ::std::string* QueryServerRequest::mutable_a() {
  if (!has_a()) {
    clear_msg();
    set_has_a();
    msg_.a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:QueryServerRequest.a)
  return msg_.a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryServerRequest::release_a() {
  // @@protoc_insertion_point(field_release:QueryServerRequest.a)
  if (has_a()) {
    clear_has_msg();
    return msg_.a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void QueryServerRequest::set_allocated_a(::std::string* a) {
  if (!has_a()) {
    msg_.a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_msg();
  if (a != NULL) {
    set_has_a();
    msg_.a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        a);
  }
  // @@protoc_insertion_point(field_set_allocated:QueryServerRequest.a)
}

// optional int32 x = 3;
bool QueryServerRequest::has_x() const {
  return msg_case() == kX;
}
void QueryServerRequest::set_has_x() {
  _oneof_case_[0] = kX;
}
void QueryServerRequest::clear_x() {
  if (has_x()) {
    msg_.x_ = 0;
    clear_has_msg();
  }
}
 ::google::protobuf::int32 QueryServerRequest::x() const {
  // @@protoc_insertion_point(field_get:QueryServerRequest.x)
  if (has_x()) {
    return msg_.x_;
  }
  return 0;
}
 void QueryServerRequest::set_x(::google::protobuf::int32 value) {
  if (!has_x()) {
    clear_msg();
    set_has_x();
  }
  msg_.x_ = value;
  // @@protoc_insertion_point(field_set:QueryServerRequest.x)
}

bool QueryServerRequest::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void QueryServerRequest::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
QueryServerRequest::MsgCase QueryServerRequest::msg_case() const {
  return QueryServerRequest::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryServerResponse::kRqIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryServerResponse::QueryServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryServerResponse)
}

void QueryServerResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryServerResponse::QueryServerResponse(const QueryServerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryServerResponse)
}

void QueryServerResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rqid_ = GOOGLE_LONGLONG(0);
}

QueryServerResponse::~QueryServerResponse() {
  // @@protoc_insertion_point(destructor:QueryServerResponse)
  SharedDtor();
}

void QueryServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryServerResponse_descriptor_;
}

const QueryServerResponse& QueryServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageProtocol_2eproto();
  return *default_instance_;
}

QueryServerResponse* QueryServerResponse::default_instance_ = NULL;

QueryServerResponse* QueryServerResponse::New(::google::protobuf::Arena* arena) const {
  QueryServerResponse* n = new QueryServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryServerResponse)
  rqid_ = GOOGLE_LONGLONG(0);
}

bool QueryServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rqID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rqid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryServerResponse)
  return false;
#undef DO_
}

void QueryServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryServerResponse)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rqid(), output);
  }

  // @@protoc_insertion_point(serialize_end:QueryServerResponse)
}

::google::protobuf::uint8* QueryServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryServerResponse)
  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rqid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QueryServerResponse)
  return target;
}

int QueryServerResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QueryServerResponse)
  int total_size = 0;

  // optional int64 rqID = 1;
  if (this->rqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rqid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryServerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryServerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryServerResponse)
    MergeFrom(*source);
  }
}

void QueryServerResponse::MergeFrom(const QueryServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryServerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.rqid() != 0) {
    set_rqid(from.rqid());
  }
}

void QueryServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryServerResponse::CopyFrom(const QueryServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryServerResponse::IsInitialized() const {

  return true;
}

void QueryServerResponse::Swap(QueryServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryServerResponse::InternalSwap(QueryServerResponse* other) {
  std::swap(rqid_, other->rqid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryServerResponse_descriptor_;
  metadata.reflection = QueryServerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryServerResponse

// optional int64 rqID = 1;
void QueryServerResponse::clear_rqid() {
  rqid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryServerResponse::rqid() const {
  // @@protoc_insertion_point(field_get:QueryServerResponse.rqID)
  return rqid_;
}
 void QueryServerResponse::set_rqid(::google::protobuf::int64 value) {
  
  rqid_ = value;
  // @@protoc_insertion_point(field_set:QueryServerResponse.rqID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
