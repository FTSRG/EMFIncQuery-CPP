package hu.bme.mit.cpp.localsearch.school.query

import "http://school.ecore"

pattern schools(school) {
	School(school);
}

pattern teachers(teacher) {
	Teacher(teacher);
}

pattern students(student) {
	Student(student);
}

@Bind(parameters={school})
pattern teachersOfSchool(teacher, school) {
	School.teachers(school, teacher);
}

pattern coursesOfTeacher(course, teacher) {
	Teacher.courses(teacher, course);
}

pattern specializationCoursesOfTeacher(course, teacher) {
	Teacher.courses(teacher, course);
	SpecialisationCourse(course);
}

@Bind(parameters={student})
@Bind(parameters={name})
pattern studentName(student, name) {
	Student.name(student, name);
}

@Bind(parameters={teacher})
@Bind(parameters={teacher, schoolClass})
pattern classesOfTeacher(teacher, schoolClass) {
	find coursesOfTeacher(course, teacher);
	Course.schoolClass(course, schoolClass);
}

@Bind(parameters={school})
@Bind(parameters={student})
@Bind(parameters={student, school})
pattern studentsOfSchool(student, school) {
	Student.schoolClass.courses.school(student, school);
}

pattern mutualFriendsInOneSchool(studentA, studentB) {
	find studentsOfSchool(studentA, school);
	find studentsOfSchool(studentB, school);
	Student.friendsWith(studentA, studentB);
	Student.friendsWith(studentB, studentA);
}

pattern schoolsWithMutualFriends(school) {
	find studentsOfSchool(studentA, school);
	find studentsOfSchool(studentB, school);
	find mutualFriendsInOneSchool(studentA, studentB);
}

pattern teachersWithActualWork(teacher, name) {
	Teacher.courses(teacher, _);
	find teacherName(teacher, name);
} or {
	Teacher.homeroomedClass(teacher, _);
	find teacherName(teacher, name);
}

pattern teachersWithoutWork(teacher) {
	Teacher(teacher);
	neg find teachersWithActualWork(teacher, _);
}

@Bind(parameters=name)
pattern teacherName(teacher, name) {
	Teacher.name(teacher, name);
}
